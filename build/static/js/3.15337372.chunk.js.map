{"version":3,"sources":["../../src/utils/render.ts","../../src/components/keyboard.ts","../../src/utils/match.ts","../../src/hooks/use-sync-refs.ts","../../src/utils/bugs.ts","../../src/hooks/use-iso-morphic-effect.ts","../../src/hooks/use-server-handoff-complete.ts","../../src/hooks/use-id.ts","../../src/utils/focus-management.ts","../../src/hooks/use-focus-trap.ts","../../src/hooks/use-window-event.ts","../../src/hooks/use-is-mounted.ts","../../src/internal/portal-force-root.tsx","../../src/components/portal/portal.tsx","../../src/components/description/description.tsx","../../src/internal/open-closed.tsx","../../src/internal/stack-context.tsx","../../src/components/dialog/dialog.tsx","../../src/components/disclosure/disclosure.tsx","../../src/components/focus-trap/focus-trap.tsx","../../src/utils/calculate-active-index.ts","../../src/components/listbox/listbox.tsx","../../src/utils/disposables.ts","../../src/hooks/use-disposables.ts","../../src/hooks/use-computed.ts","../../src/components/menu/menu.tsx","../../src/hooks/use-tree-walker.ts","../../src/components/popover/popover.tsx","../../src/components/label/label.tsx","../../src/components/radio-group/radio-group.tsx","../../src/hooks/use-flags.ts","../../src/components/switch/switch.tsx","../../src/components/transitions/utils/transition.ts","../../src/hooks/use-is-initial-render.ts","../../src/utils/once.ts","../../src/components/transitions/transition.tsx","../node_modules/@heroicons/react/outline/esm/BellIcon.js","../node_modules/@heroicons/react/outline/esm/MenuIcon.js","../node_modules/@heroicons/react/outline/esm/XIcon.js"],"names":["match","value","lookup","returnValue","args","error","Error","Object","key","render","props","slot","defaultTag","features","visible","name","_render","featureFlags","Features","isStatic","rest","unmount","RenderStrategy","hidden","style","display","omit","as","Component","tag","children","refName","passThroughProps","refRelatedProps","resolvedChildren","isValidElement","Array","line","cloneElement","clone","func","existingProps","event","mergeEventFunctions","compact","createElement","forwardRefWithAs","component","forwardRef","displayName","keysToOmit","useSyncRefs","refs","cache","useRef","useEffect","useCallback","ref","isDisabledReactIssue7711","element","parent","legend","isParentDisabled","previous","isFirstLegend","Keys","useIsoMorphicEffect","window","state","serverHandoffComplete","useServerHandoffComplete","useState","setServerHandoffComplete","id","generateId","useId","ready","setId","focusableSelector","selector","getFocusableElements","container","document","body","isFocusableElement","mode","FocusableMode","Strict","next","focusIn","focus","elements","active","direction","Focus","Direction","startIndex","Math","focusOptions","preventScroll","offset","total","FocusResult","nextIdx","useWindowEvent","type","listener","options","listenerRef","useIsMounted","mounted","ForcePortalRootContext","createContext","usePortalTarget","forceInRoot","useContext","groupTarget","existingRoot","root","target","setTarget","DEFAULT_PORTAL_TAG","Portal","passthroughProps","createPortal","DEFAULT_GROUP_TAG","PortalGroupContext","DescriptionContext","useDescriptionContext","context","err","useDescriptions","descriptionIds","setDescriptionIds","useMemo","register","existing","idx","contextBag","Description","propsWeControl","Context","useOpenClosed","OpenClosedProvider","State","StackContext","StackMessage","DialogStates","ActionTypes","action","titleId","DialogContext","DisclosureStates","reducers","disclosureState","linkedPanel","buttonId","panelId","DisclosureContext","useDisclosureContext","Disclosure","DEFAULT_DISCLOSURE_TAG","defaultOpen","reducerBag","useReducer","dispatch","open","Open","Button","buttonRef","handleKeyDown","ToggleDisclosure","handleKeyUp","handleClick","onKeyDown","onKeyUp","onClick","PanelRenderFeatures","Panel","panelRef","LinkPanel","usesOpenClosedState","UnlinkPanel","disposables","api","requestAnimationFrame","raf","cancelAnimationFrame","nextFrame","setTimeout","timer","clearTimeout","add","dispose","useDisposables","d","useComputed","cb","dependencies","setValue","cbRef","calculateActiveIndex","resolvers","items","currentActiveIndex","activeIndex","nextActiveIndex","item","all","x","assertNever","ListboxStates","activeOptionIndex","listboxState","Closed","disabled","resolveItems","resolveActiveIndex","resolveId","resolveDisabled","searchQuery","option","dataRef","nextOptions","currentActiveOption","a","ListboxContext","useListboxContext","Listbox","DEFAULT_LISTBOX_TAG","onChange","propsRef","current","labelRef","createRef","optionsRef","CloseListbox","OpenListbox","First","Last","labelledby","OptionsRenderFeatures","Options","searchDisposables","Next","Previous","ClearSearch","role","tabIndex","useTreeWalker","accept","walk","enabled","acceptRef","walkRef","acceptNode","walker","NodeFilter","Label","Option","selected","bag","select","block","handleFocus","Nothing","handleMove","handleLeave","onFocus","onPointerMove","onMouseMove","onPointerLeave","onMouseLeave","MenuStates","activeItemIndex","menuState","nextItems","currentActiveItem","MenuContext","useMenuContext","Menu","DEFAULT_MENU_TAG","itemsRef","CloseMenu","OpenMenu","ItemsRenderFeatures","Items","node","DEFAULT_ITEM_TAG","Item","PopoverStates","popoverState","button","panel","PopoverContext","usePopoverContext","Popover","PopoverGroupContext","usePopoverGroupContext","PopoverPanelContext","registerBag","close","ClosePopover","groupContext","registerPopover","isFocusWithinPopoverGroup","internalButtonRef","closeOthers","panelContext","isWithinPanel","activeElementRef","previousActiveElementRef","TogglePopover","focusableElements","previousIdx","OverlayRenderFeatures","Overlay","overlayRef","internalPanelRef","activeElement","result","buttonIdx","groupRef","popovers","setPopovers","unregisterPopover","popover","LabelContext","useLabelContext","useLabels","labelIds","setLabelIds","passive","allProps","radio","RadioGroupContext","useRadioGroupContext","RadioGroup","LabelProvider","describedby","DescriptionProvider","radioGroupRef","firstOption","containsCheckedOption","triggerChange","nextValue","nextOption","activeOption","registerOption","RegisterOption","change","OptionState","optionRef","initialFlags","flags","setFlags","addFlag","hasFlag","Boolean","removeFlag","toggleFlag","useFlags","radioGroupDisabled","radioGroupValue","handleBlur","isFirstOption","isDisabled","checked","undefined","onBlur","GroupContext","Switch","toggle","handleKeyPress","onKeyPress","useIsInitialRender","initial","addClasses","classes","removeClasses","transition","base","from","to","done","_done","called","once","getComputedStyle","transitionDuration","transitionDelay","map","v","parseFloat","z","resolvedValue","durationMs","delaysMs","Reason","waitForTransition","reason","useSplitClasses","className","switchElement","setSwitchElement","switch","setSwitch","TransitionContext","TreeStates","NestingContext","hasChildren","useNesting","doneRef","transitionableChildren","unregister","strategy","Hidden","child","Visible","childId","noop","eventNames","ensureEventHooksExist","events","TransitionChildRenderFeatures","TransitionChild","beforeEnter","afterEnter","beforeLeave","afterLeave","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","setState","useTransitionContext","show","appear","useParentNesting","isTransitioning","nesting","enterClasses","enterFromClasses","enterToClasses","leaveClasses","leaveFromClasses","leaveToClasses","eventsRef","useEvents","skip","Transition","includes","nestingBag","transitionBag","sharedProps","React","BellIcon","assign","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","MenuIcon","XIcon"],"mappings":"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","file":"static/js/3.15337372.chunk.js","sourcesContent":["import {\n  Fragment,\n  cloneElement,\n  createElement,\n  forwardRef,\n  isValidElement,\n\n  // Types\n  ElementType,\n  ReactElement,\n} from 'react'\nimport { Props, XOR, __, Expand } from '../types'\nimport { match } from './match'\n\nexport enum Features {\n  /** No features at all */\n  None = 0,\n\n  /**\n   * When used, this will allow us to use one of the render strategies.\n   *\n   * **The render strategies are:**\n   *    - **Unmount**   _(Will unmount the component.)_\n   *    - **Hidden**    _(Will hide the component using the [hidden] attribute.)_\n   */\n  RenderStrategy = 1,\n\n  /**\n   * When used, this will allow the user of our component to be in control. This can be used when\n   * you want to transition based on some state.\n   */\n  Static = 2,\n}\n\nexport enum RenderStrategy {\n  Unmount,\n  Hidden,\n}\n\ntype PropsForFeature<TPassedInFeatures extends Features, TForFeature extends Features, TProps> = {\n  [P in TPassedInFeatures]: P extends TForFeature ? TProps : __\n}[TPassedInFeatures]\n\nexport type PropsForFeatures<T extends Features> = XOR<\n  PropsForFeature<T, Features.Static, { static?: boolean }>,\n  PropsForFeature<T, Features.RenderStrategy, { unmount?: boolean }>\n>\n\nexport function render<TFeature extends Features, TTag extends ElementType, TSlot>({\n  props,\n  slot,\n  defaultTag,\n  features,\n  visible = true,\n  name,\n}: {\n  props: Expand<Props<TTag, TSlot, any> & PropsForFeatures<TFeature>>\n  slot?: TSlot\n  defaultTag: ElementType\n  features?: TFeature\n  visible?: boolean\n  name: string\n}) {\n  // Visible always render\n  if (visible) return _render(props, slot, defaultTag, name)\n\n  let featureFlags = features ?? Features.None\n\n  if (featureFlags & Features.Static) {\n    let { static: isStatic = false, ...rest } = props as PropsForFeatures<Features.Static>\n\n    // When the `static` prop is passed as `true`, then the user is in control, thus we don't care about anything else\n    if (isStatic) return _render(rest, slot, defaultTag, name)\n  }\n\n  if (featureFlags & Features.RenderStrategy) {\n    let { unmount = true, ...rest } = props as PropsForFeatures<Features.RenderStrategy>\n    let strategy = unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n    return match(strategy, {\n      [RenderStrategy.Unmount]() {\n        return null\n      },\n      [RenderStrategy.Hidden]() {\n        return _render(\n          { ...rest, ...{ hidden: true, style: { display: 'none' } } },\n          slot,\n          defaultTag,\n          name\n        )\n      },\n    })\n  }\n\n  // No features enabled, just render\n  return _render(props, slot, defaultTag, name)\n}\n\nfunction _render<TTag extends ElementType, TSlot>(\n  props: Props<TTag, TSlot> & { ref?: unknown },\n  slot: TSlot = {} as TSlot,\n  tag: ElementType,\n  name: string\n) {\n  let { as: Component = tag, children, refName = 'ref', ...passThroughProps } = omit(props, [\n    'unmount',\n    'static',\n  ])\n\n  // This allows us to use `<HeadlessUIComponent as={MyComponent} refName=\"innerRef\" />`\n  let refRelatedProps = props.ref !== undefined ? { [refName]: props.ref } : {}\n\n  let resolvedChildren = (typeof children === 'function' ? children(slot) : children) as\n    | ReactElement\n    | ReactElement[]\n\n  // Allow for className to be a function with the slot as the contents\n  if (passThroughProps.className && typeof passThroughProps.className === 'function') {\n    ;(passThroughProps as any).className = passThroughProps.className(slot)\n  }\n\n  if (Component === Fragment) {\n    if (Object.keys(passThroughProps).length > 0) {\n      if (\n        !isValidElement(resolvedChildren) ||\n        (Array.isArray(resolvedChildren) && resolvedChildren.length > 1)\n      ) {\n        throw new Error(\n          [\n            'Passing props on \"Fragment\"!',\n            '',\n            `The current component <${name} /> is rendering a \"Fragment\".`,\n            `However we need to passthrough the following props:`,\n            Object.keys(passThroughProps)\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n            '',\n            'You can apply a few solutions:',\n            [\n              'Add an `as=\"...\"` prop, to ensure that we render an actual element instead of a \"Fragment\".',\n              'Render a single element as the child so that we can forward the props onto that element.',\n            ]\n              .map(line => `  - ${line}`)\n              .join('\\n'),\n          ].join('\\n')\n        )\n      }\n\n      return cloneElement(\n        resolvedChildren,\n        Object.assign(\n          {},\n          // Filter out undefined values so that they don't override the existing values\n          mergeEventFunctions(compact(omit(passThroughProps, ['ref'])), resolvedChildren.props, [\n            'onClick',\n          ]),\n          refRelatedProps\n        )\n      )\n    }\n  }\n\n  return createElement(\n    Component,\n    Object.assign({}, omit(passThroughProps, ['ref']), Component !== Fragment && refRelatedProps),\n    resolvedChildren\n  )\n}\n\n/**\n * We can use this function for the following useCase:\n *\n * <Menu.Item> <button onClick={console.log} /> </Menu.Item>\n *\n * Our `Menu.Item` will have an internal `onClick`, if you passthrough an `onClick` to the actual\n * `Menu.Item` component we will call it correctly. However, when we have an `onClick` on the actual\n * first child, that one should _also_ be called (but before this implementation, it was just\n * overriding the `onClick`). But it is only when we *render* that we have access to the existing\n * props of this component.\n *\n * It's a bit hacky, and not that clean, but it is something internal and we have tests to rely on\n * so that we can refactor this later (if needed).\n */\nfunction mergeEventFunctions(\n  passThroughProps: Record<string, any>,\n  existingProps: Record<string, any>,\n  functionsToMerge: string[]\n) {\n  let clone = Object.assign({}, passThroughProps)\n  for (let func of functionsToMerge) {\n    if (passThroughProps[func] !== undefined && existingProps[func] !== undefined) {\n      Object.assign(clone, {\n        [func](event: { defaultPrevented: boolean }) {\n          // Props we control\n          if (!event.defaultPrevented) passThroughProps[func](event)\n\n          // Existing props on the component\n          if (!event.defaultPrevented) existingProps[func](event)\n        },\n      })\n    }\n  }\n\n  return clone\n}\n\n/**\n * This is a hack, but basically we want to keep the full 'API' of the component, but we do want to\n * wrap it in a forwardRef so that we _can_ passthrough the ref\n */\nexport function forwardRefWithAs<T extends { name: string; displayName?: string }>(\n  component: T\n): T & { displayName: string } {\n  return Object.assign(forwardRef((component as unknown) as any) as any, {\n    displayName: component.displayName ?? component.name,\n  })\n}\n\nfunction compact<T extends Record<any, any>>(object: T) {\n  let clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n\nfunction omit<T extends Record<any, any>>(object: T, keysToOmit: string[] = []) {\n  let clone = Object.assign({}, object)\n  for (let key of keysToOmit) {\n    if (key in clone) delete clone[key]\n  }\n  return clone\n}\n","// TODO: This must already exist somewhere, right? 🤔\n// Ref: https://www.w3.org/TR/uievents-key/#named-key-attribute-values\nexport enum Keys {\n  Space = ' ',\n  Enter = 'Enter',\n  Escape = 'Escape',\n  Backspace = 'Backspace',\n\n  ArrowLeft = 'ArrowLeft',\n  ArrowUp = 'ArrowUp',\n  ArrowRight = 'ArrowRight',\n  ArrowDown = 'ArrowDown',\n\n  Home = 'Home',\n  End = 'End',\n\n  PageUp = 'PageUp',\n  PageDown = 'PageDown',\n\n  Tab = 'Tab',\n}\n","export function match<TValue extends string | number = string, TReturnValue = unknown>(\n  value: TValue,\n  lookup: Record<TValue, TReturnValue | ((...args: any[]) => TReturnValue)>,\n  ...args: any[]\n): TReturnValue {\n  if (value in lookup) {\n    let returnValue = lookup[value]\n    return typeof returnValue === 'function' ? returnValue(...args) : returnValue\n  }\n\n  let error = new Error(\n    `Tried to handle \"${value}\" but there is no handler defined. Only defined handlers are: ${Object.keys(\n      lookup\n    )\n      .map(key => `\"${key}\"`)\n      .join(', ')}.`\n  )\n  if (Error.captureStackTrace) Error.captureStackTrace(error, match)\n  throw error\n}\n","import { useRef, useEffect, useCallback } from 'react'\n\nexport function useSyncRefs<TType>(\n  ...refs: (React.MutableRefObject<TType> | ((instance: TType) => void) | null)[]\n) {\n  let cache = useRef(refs)\n\n  useEffect(() => {\n    cache.current = refs\n  }, [refs])\n\n  return useCallback(\n    (value: TType) => {\n      for (let ref of cache.current) {\n        if (ref == null) continue\n        if (typeof ref === 'function') ref(value)\n        else ref.current = value\n      }\n    },\n    [cache]\n  )\n}\n","// See: https://github.com/facebook/react/issues/7711\n// See: https://github.com/facebook/react/pull/20612\n// See: https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#concept-fe-disabled (2.)\nexport function isDisabledReactIssue7711(element: Element): boolean {\n  let parent = element.parentElement\n  let legend = null\n\n  while (parent && !(parent instanceof HTMLFieldSetElement)) {\n    if (parent instanceof HTMLLegendElement) legend = parent\n    parent = parent.parentElement\n  }\n\n  let isParentDisabled = parent?.getAttribute('disabled') === '' ?? false\n  if (isParentDisabled && isFirstLegend(legend)) return false\n\n  return isParentDisabled\n}\n\nfunction isFirstLegend(element: HTMLLegendElement | null): boolean {\n  if (!element) return false\n\n  let previous = element.previousElementSibling\n\n  while (previous !== null) {\n    if (previous instanceof HTMLLegendElement) return false\n    previous = previous.previousElementSibling\n  }\n\n  return true\n}\n","import { useLayoutEffect, useEffect } from 'react'\n\nexport const useIsoMorphicEffect = typeof window !== 'undefined' ? useLayoutEffect : useEffect\n","import { useState, useEffect } from 'react'\n\nlet state = { serverHandoffComplete: false }\n\nexport function useServerHandoffComplete() {\n  let [serverHandoffComplete, setServerHandoffComplete] = useState(state.serverHandoffComplete)\n\n  useEffect(() => {\n    if (serverHandoffComplete === true) return\n\n    setServerHandoffComplete(true)\n  }, [serverHandoffComplete])\n\n  useEffect(() => {\n    if (state.serverHandoffComplete === false) state.serverHandoffComplete = true\n  }, [])\n\n  return serverHandoffComplete\n}\n","import { useState } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\nimport { useServerHandoffComplete } from './use-server-handoff-complete'\n\n// We used a \"simple\" approach first which worked for SSR and rehydration on the client. However we\n// didn't take care of the Suspense case. To fix this we used the approach the @reach-ui/auto-id\n// uses.\n//\n// Credits: https://github.com/reach/reach-ui/blob/develop/packages/auto-id/src/index.tsx\n\nlet id = 0\nfunction generateId() {\n  return ++id\n}\n\nexport function useId() {\n  let ready = useServerHandoffComplete()\n  let [id, setId] = useState(ready ? generateId : null)\n\n  useIsoMorphicEffect(() => {\n    if (id === null) setId(generateId())\n  }, [id])\n\n  return id != null ? '' + id : undefined\n}\n","import { match } from './match'\n\n// Credit:\n//  - https://stackoverflow.com/a/30753870\nlet focusableSelector = [\n  '[contentEditable=true]',\n  '[tabindex]',\n  'a[href]',\n  'area[href]',\n  'button:not([disabled])',\n  'iframe',\n  'input:not([disabled])',\n  'select:not([disabled])',\n  'textarea:not([disabled])',\n]\n  .map(\n    process.env.NODE_ENV === 'test'\n      ? // TODO: Remove this once JSDOM fixes the issue where an element that is\n        // \"hidden\" can be the document.activeElement, because this is not possible\n        // in real browsers.\n        selector => `${selector}:not([tabindex='-1']):not([style*='display: none'])`\n      : selector => `${selector}:not([tabindex='-1'])`\n  )\n  .join(',')\n\nexport enum Focus {\n  /** Focus the first non-disabled element */\n  First = 1 << 0,\n\n  /** Focus the previous non-disabled element */\n  Previous = 1 << 1,\n\n  /** Focus the next non-disabled element */\n  Next = 1 << 2,\n\n  /** Focus the last non-disabled element */\n  Last = 1 << 3,\n\n  /** Wrap tab around */\n  WrapAround = 1 << 4,\n\n  /** Prevent scrolling the focusable elements into view */\n  NoScroll = 1 << 5,\n}\n\nexport enum FocusResult {\n  /** Something went wrong while trying to focus. */\n  Error,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N+1` where `N` is the last index in the array, then we overflow. */\n  Overflow,\n\n  /** Focus was successful. */\n  Success,\n\n  /** When `Focus.WrapAround` is enabled, going from position `N` to `N-1` where `N` is the first index in the array, then we underflow. */\n  Underflow,\n}\n\nenum Direction {\n  Previous = -1,\n  Next = 1,\n}\n\nexport function getFocusableElements(container: HTMLElement | null = document.body) {\n  if (container == null) return []\n  return Array.from(container.querySelectorAll<HTMLElement>(focusableSelector))\n}\n\nexport enum FocusableMode {\n  /** The element itself must be focusable. */\n  Strict,\n\n  /** The element should be inside of a focusable element. */\n  Loose,\n}\n\nexport function isFocusableElement(\n  element: HTMLElement,\n  mode: FocusableMode = FocusableMode.Strict\n) {\n  if (element === document.body) return false\n\n  return match(mode, {\n    [FocusableMode.Strict]() {\n      return element.matches(focusableSelector)\n    },\n    [FocusableMode.Loose]() {\n      let next: HTMLElement | null = element\n\n      while (next !== null) {\n        if (next.matches(focusableSelector)) return true\n        next = next.parentElement\n      }\n\n      return false\n    },\n  })\n}\n\nexport function focusElement(element: HTMLElement | null) {\n  element?.focus({ preventScroll: true })\n}\n\nexport function focusIn(container: HTMLElement | HTMLElement[], focus: Focus) {\n  let elements = Array.isArray(container) ? container : getFocusableElements(container)\n  let active = document.activeElement as HTMLElement\n\n  let direction = (() => {\n    if (focus & (Focus.First | Focus.Next)) return Direction.Next\n    if (focus & (Focus.Previous | Focus.Last)) return Direction.Previous\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let startIndex = (() => {\n    if (focus & Focus.First) return 0\n    if (focus & Focus.Previous) return Math.max(0, elements.indexOf(active)) - 1\n    if (focus & Focus.Next) return Math.max(0, elements.indexOf(active)) + 1\n    if (focus & Focus.Last) return elements.length - 1\n\n    throw new Error('Missing Focus.First, Focus.Previous, Focus.Next or Focus.Last')\n  })()\n\n  let focusOptions = focus & Focus.NoScroll ? { preventScroll: true } : {}\n\n  let offset = 0\n  let total = elements.length\n  let next = undefined\n  do {\n    // Guard against infinite loops\n    if (offset >= total || offset + total <= 0) return FocusResult.Error\n\n    let nextIdx = startIndex + offset\n\n    if (focus & Focus.WrapAround) {\n      nextIdx = (nextIdx + total) % total\n    } else {\n      if (nextIdx < 0) return FocusResult.Underflow\n      if (nextIdx >= total) return FocusResult.Overflow\n    }\n\n    next = elements[nextIdx]\n\n    // Try the focus the next element, might not work if it is \"hidden\" to the user.\n    next?.focus(focusOptions)\n\n    // Try the next one in line\n    offset += direction\n  } while (next !== document.activeElement)\n\n  // This is a little weird, but let me try and explain: There are a few scenario's\n  // in chrome for example where a focused `<a>` tag does not get the default focus\n  // styles and sometimes they do. This highly depends on whether you started by\n  // clicking or by using your keyboard. When you programmatically add focus `anchor.focus()`\n  // then the active element (document.activeElement) is this anchor, which is expected.\n  // However in that case the default focus styles are not applied *unless* you\n  // also add this tabindex.\n  if (!next.hasAttribute('tabindex')) next.setAttribute('tabindex', '0')\n\n  return FocusResult.Success\n}\n","import {\n  useRef,\n  // Types\n  MutableRefObject,\n  useEffect,\n} from 'react'\n\nimport { Keys } from '../components/keyboard'\nimport { focusElement, focusIn, Focus, FocusResult } from '../utils/focus-management'\nimport { useWindowEvent } from './use-window-event'\nimport { useIsMounted } from './use-is-mounted'\n\nexport enum Features {\n  /** No features enabled for the `useFocusTrap` hook. */\n  None = 1 << 0,\n\n  /** Ensure that we move focus initially into the container. */\n  InitialFocus = 1 << 1,\n\n  /** Ensure that pressing `Tab` and `Shift+Tab` is trapped within the container. */\n  TabLock = 1 << 2,\n\n  /** Ensure that programmatically moving focus outside of the container is disallowed. */\n  FocusLock = 1 << 3,\n\n  /** Ensure that we restore the focus when unmounting the component that uses this `useFocusTrap` hook. */\n  RestoreFocus = 1 << 4,\n\n  /** Enable all features. */\n  All = InitialFocus | TabLock | FocusLock | RestoreFocus,\n}\n\nexport function useFocusTrap(\n  container: MutableRefObject<HTMLElement | null>,\n  features: Features = Features.All,\n  {\n    initialFocus,\n    containers,\n  }: {\n    initialFocus?: MutableRefObject<HTMLElement | null>\n    containers?: MutableRefObject<Set<MutableRefObject<HTMLElement | null>>>\n  } = {}\n) {\n  let restoreElement = useRef<HTMLElement | null>(\n    typeof window !== 'undefined' ? (document.activeElement as HTMLElement) : null\n  )\n  let previousActiveElement = useRef<HTMLElement | null>(null)\n  let mounted = useIsMounted()\n\n  let featuresRestoreFocus = Boolean(features & Features.RestoreFocus)\n  let featuresInitialFocus = Boolean(features & Features.InitialFocus)\n\n  // Capture the currently focused element, before we enable the focus trap.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    restoreElement.current = document.activeElement as HTMLElement\n  }, [featuresRestoreFocus])\n\n  // Restore the focus when we unmount the component.\n  useEffect(() => {\n    if (!featuresRestoreFocus) return\n\n    return () => {\n      focusElement(restoreElement.current)\n      restoreElement.current = null\n    }\n  }, [featuresRestoreFocus])\n\n  // Handle initial focus\n  useEffect(() => {\n    if (!featuresInitialFocus) return\n    if (!container.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n\n    if (initialFocus?.current) {\n      if (initialFocus?.current === activeElement) {\n        previousActiveElement.current = activeElement\n        return // Initial focus ref is already the active element\n      }\n    } else if (container.current.contains(activeElement)) {\n      previousActiveElement.current = activeElement\n      return // Already focused within Dialog\n    }\n\n    // Try to focus the initialFocus ref\n    if (initialFocus?.current) {\n      focusElement(initialFocus.current)\n    } else {\n      if (focusIn(container.current, Focus.First) === FocusResult.Error) {\n        throw new Error('There are no focusable elements inside the <FocusTrap />')\n      }\n    }\n\n    previousActiveElement.current = document.activeElement as HTMLElement\n  }, [container, initialFocus, featuresInitialFocus])\n\n  // Handle `Tab` & `Shift+Tab` keyboard events\n  useWindowEvent('keydown', event => {\n    if (!(features & Features.TabLock)) return\n\n    if (!container.current) return\n    if (event.key !== Keys.Tab) return\n\n    event.preventDefault()\n\n    if (\n      focusIn(\n        container.current,\n        (event.shiftKey ? Focus.Previous : Focus.Next) | Focus.WrapAround\n      ) === FocusResult.Success\n    ) {\n      previousActiveElement.current = document.activeElement as HTMLElement\n    }\n  })\n\n  // Prevent programmatically escaping the container\n  useWindowEvent(\n    'focus',\n    event => {\n      if (!(features & Features.FocusLock)) return\n\n      let allContainers = new Set(containers?.current)\n      allContainers.add(container)\n\n      if (!allContainers.size) return\n\n      let previous = previousActiveElement.current\n      if (!previous) return\n      if (!mounted.current) return\n\n      let toElement = event.target as HTMLElement | null\n\n      if (toElement && toElement instanceof HTMLElement) {\n        if (!contains(allContainers, toElement)) {\n          event.preventDefault()\n          event.stopPropagation()\n          focusElement(previous)\n        } else {\n          previousActiveElement.current = toElement\n          focusElement(toElement)\n        }\n      } else {\n        focusElement(previousActiveElement.current)\n      }\n    },\n    true\n  )\n}\n\nfunction contains(containers: Set<MutableRefObject<HTMLElement | null>>, element: HTMLElement) {\n  for (let container of containers) {\n    if (container.current?.contains(element)) return true\n  }\n\n  return false\n}\n","import { useEffect, useRef } from 'react'\n\nexport function useWindowEvent<TType extends keyof WindowEventMap>(\n  type: TType,\n  listener: (this: Window, ev: WindowEventMap[TType]) => any,\n  options?: boolean | AddEventListenerOptions\n) {\n  let listenerRef = useRef(listener)\n  listenerRef.current = listener\n\n  useEffect(() => {\n    function handler(event: WindowEventMap[TType]) {\n      listenerRef.current.call(window, event)\n    }\n\n    window.addEventListener(type, handler, options)\n    return () => window.removeEventListener(type, handler, options)\n  }, [type, options])\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsMounted() {\n  let mounted = useRef(false)\n\n  useEffect(() => {\n    mounted.current = true\n\n    return () => {\n      mounted.current = false\n    }\n  }, [])\n\n  return mounted\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n} from 'react'\n\nlet ForcePortalRootContext = createContext(false)\n\nexport function usePortalRoot() {\n  return useContext(ForcePortalRootContext)\n}\n\ninterface ForcePortalRootProps {\n  force: boolean\n  children: ReactNode\n}\n\nexport function ForcePortalRoot(props: ForcePortalRootProps) {\n  return (\n    <ForcePortalRootContext.Provider value={props.force}>\n      {props.children}\n    </ForcePortalRootContext.Provider>\n  )\n}\n","import React, {\n  Fragment,\n  createContext,\n  useContext,\n  useEffect,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { createPortal } from 'react-dom'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { usePortalRoot } from '../../internal/portal-force-root'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nfunction usePortalTarget(): HTMLElement | null {\n  let forceInRoot = usePortalRoot()\n  let groupTarget = useContext(PortalGroupContext)\n  let [target, setTarget] = useState(() => {\n    // Group context is used, but still null\n    if (!forceInRoot && groupTarget !== null) return null\n\n    // No group context is used, let's create a default portal root\n    if (typeof window === 'undefined') return null\n    let existingRoot = document.getElementById('headlessui-portal-root')\n    if (existingRoot) return existingRoot\n\n    let root = document.createElement('div')\n    root.setAttribute('id', 'headlessui-portal-root')\n    return document.body.appendChild(root)\n  })\n\n  useEffect(() => {\n    if (forceInRoot) return\n    if (groupTarget === null) return\n    setTarget(groupTarget.current)\n  }, [groupTarget, setTarget, forceInRoot])\n\n  return target\n}\n\n// ---\n\nlet DEFAULT_PORTAL_TAG = Fragment\ninterface PortalRenderPropArg {}\n\nexport function Portal<TTag extends ElementType = typeof DEFAULT_PORTAL_TAG>(\n  props: Props<TTag, PortalRenderPropArg>\n) {\n  let passthroughProps = props\n  let target = usePortalTarget()\n  let [element] = useState<HTMLDivElement | null>(() =>\n    typeof window === 'undefined' ? null : document.createElement('div')\n  )\n\n  let ready = useServerHandoffComplete()\n\n  useIsoMorphicEffect(() => {\n    if (!target) return\n    if (!element) return\n\n    target.appendChild(element)\n\n    return () => {\n      if (!target) return\n      if (!element) return\n\n      target.removeChild(element)\n\n      if (target.childNodes.length <= 0) {\n        target.parentElement?.removeChild(target)\n      }\n    }\n  }, [target, element])\n\n  if (!ready) return null\n\n  return !target || !element\n    ? null\n    : createPortal(\n        render({ props: passthroughProps, defaultTag: DEFAULT_PORTAL_TAG, name: 'Portal' }),\n        element\n      )\n}\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\ninterface GroupRenderPropArg {}\n\nlet PortalGroupContext = createContext<MutableRefObject<HTMLElement | null> | null>(null)\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(\n  props: Props<TTag, GroupRenderPropArg> & {\n    target: MutableRefObject<HTMLElement | null>\n  }\n) {\n  let { target, ...passthroughProps } = props\n\n  return (\n    <PortalGroupContext.Provider value={target}>\n      {render({\n        props: passthroughProps,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PortalGroupContext.Provider>\n  )\n}\n\n// ---\n\nPortal.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet DescriptionContext = createContext<\n  ({ register(value: string): () => void } & SharedData) | null\n>(null)\n\nfunction useDescriptionContext() {\n  let context = useContext(DescriptionContext)\n  if (context === null) {\n    let err = new Error(\n      'You used a <Description /> component, but it is not inside a relevant parent.'\n    )\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDescriptionContext)\n    throw err\n  }\n  return context\n}\n\ninterface DescriptionProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useDescriptions(): [\n  string | undefined,\n  (props: DescriptionProviderProps) => JSX.Element\n] {\n  let [descriptionIds, setDescriptionIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined\n    descriptionIds.length > 0 ? descriptionIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function DescriptionProvider(props: DescriptionProviderProps) {\n        let register = useCallback((value: string) => {\n          setDescriptionIds(existing => [...existing, value])\n\n          return () =>\n            setDescriptionIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return (\n          <DescriptionContext.Provider value={contextBag}>\n            {props.children}\n          </DescriptionContext.Provider>\n        )\n      }\n    }, [setDescriptionIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_DESCRIPTION_TAG = 'p' as const\ninterface DescriptionRenderPropArg {}\ntype DescriptionPropsWeControl = 'id'\n\nexport function Description<TTag extends ElementType = typeof DEFAULT_DESCRIPTION_TAG>(\n  props: Props<TTag, DescriptionRenderPropArg, DescriptionPropsWeControl>\n) {\n  let context = useDescriptionContext()\n  let id = `headlessui-description-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let passThroughProps = props\n  let propsWeControl = { ...context.props, id }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot: context.slot || {},\n    defaultTag: DEFAULT_DESCRIPTION_TAG,\n    name: context.name || 'Description',\n  })\n}\n","import React, {\n  createContext,\n  useContext,\n\n  // Types\n  ReactNode,\n  ReactElement,\n} from 'react'\n\nlet Context = createContext<State | null>(null)\nContext.displayName = 'OpenClosedContext'\n\nexport enum State {\n  Open,\n  Closed,\n}\n\nexport function useOpenClosed() {\n  return useContext(Context)\n}\n\ninterface Props {\n  value: State\n  children: ReactNode\n}\n\nexport function OpenClosedProvider({ value, children }: Props): ReactElement {\n  return <Context.Provider value={value}>{children}</Context.Provider>\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n\n  // Types\n  MutableRefObject,\n  ReactNode,\n} from 'react'\nimport { useIsoMorphicEffect } from '../hooks/use-iso-morphic-effect'\n\ntype OnUpdate = (\n  message: StackMessage,\n  type: string,\n  element: MutableRefObject<HTMLElement | null>\n) => void\n\nlet StackContext = createContext<OnUpdate>(() => {})\nStackContext.displayName = 'StackContext'\n\nexport enum StackMessage {\n  Add,\n  Remove,\n}\n\nexport function useStackContext() {\n  return useContext(StackContext)\n}\n\nexport function StackProvider({\n  children,\n  onUpdate,\n  type,\n  element,\n}: {\n  children: ReactNode\n  onUpdate?: OnUpdate\n  type: string\n  element: MutableRefObject<HTMLElement | null>\n}) {\n  let parentUpdate = useStackContext()\n\n  let notify = useCallback(\n    (...args: Parameters<OnUpdate>) => {\n      // Notify our layer\n      onUpdate?.(...args)\n\n      // Notify the parent\n      parentUpdate(...args)\n    },\n    [parentUpdate, onUpdate]\n  )\n\n  useIsoMorphicEffect(() => {\n    notify(StackMessage.Add, type, element)\n    return () => notify(StackMessage.Remove, type, element)\n  }, [notify, type, element])\n\n  return <StackContext.Provider value={notify}>{children}</StackContext.Provider>\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#dialog_modal\nimport React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ContextType,\n  ElementType,\n  MouseEvent as ReactMouseEvent,\n  KeyboardEvent as ReactKeyboardEvent,\n  MutableRefObject,\n  Ref,\n  useState,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { useId } from '../../hooks/use-id'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useInertOthers } from '../../hooks/use-inert-others'\nimport { Portal } from '../../components/portal/portal'\nimport { ForcePortalRoot } from '../../internal/portal-force-root'\nimport { Description, useDescriptions } from '../description/description'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\nimport { StackProvider, StackMessage } from '../../internal/stack-context'\n\nenum DialogStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  titleId: string | null\n}\n\nenum ActionTypes {\n  SetTitleId,\n}\n\ntype Actions = { type: ActionTypes.SetTitleId; id: string | null }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.SetTitleId](state, action) {\n    if (state.titleId === action.id) return state\n    return { ...state, titleId: action.id }\n  },\n}\n\nlet DialogContext = createContext<\n  | [\n      {\n        dialogState: DialogStates\n        close(): void\n        setTitleId(id: string | null): void\n      },\n      StateDefinition\n    ]\n  | null\n>(null)\nDialogContext.displayName = 'DialogContext'\n\nfunction useDialogContext(component: string) {\n  let context = useContext(DialogContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Dialog.displayName} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDialogContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DIALOG_TAG = 'div' as const\ninterface DialogRenderPropArg {\n  open: boolean\n}\ntype DialogPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'aria-modal'\n  | 'aria-describedby'\n  | 'aria-labelledby'\n  | 'onClick'\n\nlet DialogRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet DialogRoot = forwardRefWithAs(function Dialog<\n  TTag extends ElementType = typeof DEFAULT_DIALOG_TAG\n>(\n  props: Props<TTag, DialogRenderPropArg, DialogPropsWeControl> &\n    PropsForFeatures<typeof DialogRenderFeatures> & {\n      open?: boolean\n      onClose(value: boolean): void\n      initialFocus?: MutableRefObject<HTMLElement | null>\n    },\n  ref: Ref<HTMLDivElement>\n) {\n  let { open, onClose, initialFocus, ...rest } = props\n  let [nestedDialogCount, setNestedDialogCount] = useState(0)\n\n  let usesOpenClosedState = useOpenClosed()\n  if (open === undefined && usesOpenClosedState !== null) {\n    // Update the `open` prop based on the open closed state\n    open = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  let containers = useRef<Set<MutableRefObject<HTMLElement | null>>>(new Set())\n  let internalDialogRef = useRef<HTMLDivElement | null>(null)\n  let dialogRef = useSyncRefs(internalDialogRef, ref)\n\n  // Validations\n  let hasOpen = props.hasOwnProperty('open') || usesOpenClosedState !== null\n  let hasOnClose = props.hasOwnProperty('onClose')\n  if (!hasOpen && !hasOnClose) {\n    throw new Error(\n      `You have to provide an \\`open\\` and an \\`onClose\\` prop to the \\`Dialog\\` component.`\n    )\n  }\n\n  if (!hasOpen) {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but forgot an \\`open\\` prop.`\n    )\n  }\n\n  if (!hasOnClose) {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but forgot an \\`onClose\\` prop.`\n    )\n  }\n\n  if (typeof open !== 'boolean') {\n    throw new Error(\n      `You provided an \\`open\\` prop to the \\`Dialog\\`, but the value is not a boolean. Received: ${open}`\n    )\n  }\n\n  if (typeof onClose !== 'function') {\n    throw new Error(\n      `You provided an \\`onClose\\` prop to the \\`Dialog\\`, but the value is not a function. Received: ${onClose}`\n    )\n  }\n  let dialogState = open ? DialogStates.Open : DialogStates.Closed\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return dialogState === DialogStates.Open\n  })()\n\n  let [state, dispatch] = useReducer(stateReducer, {\n    titleId: null,\n    descriptionId: null,\n  } as StateDefinition)\n\n  let close = useCallback(() => onClose(false), [onClose])\n\n  let setTitleId = useCallback(\n    (id: string | null) => dispatch({ type: ActionTypes.SetTitleId, id }),\n    [dispatch]\n  )\n\n  let ready = useServerHandoffComplete()\n  let enabled = ready && dialogState === DialogStates.Open\n  let hasNestedDialogs = nestedDialogCount > 1 // 1 is the current dialog\n  let hasParentDialog = useContext(DialogContext) !== null\n\n  // If there are multiple dialogs, then you can be the root, the leaf or one\n  // in between. We only care abou whether you are the top most one or not.\n  let position = !hasNestedDialogs ? 'leaf' : 'parent'\n\n  useFocusTrap(\n    internalDialogRef,\n    enabled\n      ? match(position, {\n          parent: FocusTrapFeatures.RestoreFocus,\n          leaf: FocusTrapFeatures.All,\n        })\n      : FocusTrapFeatures.None,\n    { initialFocus, containers }\n  )\n  useInertOthers(internalDialogRef, hasNestedDialogs ? enabled : false)\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (dialogState !== DialogStates.Open) return\n    if (hasNestedDialogs) return\n    if (internalDialogRef.current?.contains(target)) return\n\n    close()\n  })\n\n  // Scroll lock\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (hasParentDialog) return\n\n    let overflow = document.documentElement.style.overflow\n    let paddingRight = document.documentElement.style.paddingRight\n\n    let scrollbarWidth = window.innerWidth - document.documentElement.clientWidth\n\n    document.documentElement.style.overflow = 'hidden'\n    document.documentElement.style.paddingRight = `${scrollbarWidth}px`\n\n    return () => {\n      document.documentElement.style.overflow = overflow\n      document.documentElement.style.paddingRight = paddingRight\n    }\n  }, [dialogState, hasParentDialog])\n\n  // Trigger close when the FocusTrap gets hidden\n  useEffect(() => {\n    if (dialogState !== DialogStates.Open) return\n    if (!internalDialogRef.current) return\n\n    let observer = new IntersectionObserver(entries => {\n      for (let entry of entries) {\n        if (\n          entry.boundingClientRect.x === 0 &&\n          entry.boundingClientRect.y === 0 &&\n          entry.boundingClientRect.width === 0 &&\n          entry.boundingClientRect.height === 0\n        ) {\n          close()\n        }\n      }\n    })\n\n    observer.observe(internalDialogRef.current)\n\n    return () => observer.disconnect()\n  }, [dialogState, internalDialogRef, close])\n\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let id = `headlessui-dialog-${useId()}`\n\n  let contextBag = useMemo<ContextType<typeof DialogContext>>(\n    () => [{ dialogState, close, setTitleId }, state],\n    [dialogState, state, close, setTitleId]\n  )\n\n  let slot = useMemo<DialogRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n\n  let propsWeControl = {\n    ref: dialogRef,\n    id,\n    role: 'dialog',\n    'aria-modal': dialogState === DialogStates.Open ? true : undefined,\n    'aria-labelledby': state.titleId,\n    'aria-describedby': describedby,\n    onClick(event: ReactMouseEvent) {\n      event.stopPropagation()\n    },\n\n    // Handle `Escape` to close\n    onKeyDown(event: ReactKeyboardEvent) {\n      if (event.key !== Keys.Escape) return\n      if (dialogState !== DialogStates.Open) return\n      if (hasNestedDialogs) return\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n  }\n  let passthroughProps = rest\n\n  return (\n    <StackProvider\n      type=\"Dialog\"\n      element={internalDialogRef}\n      onUpdate={useCallback((message, type, element) => {\n        if (type !== 'Dialog') return\n\n        match(message, {\n          [StackMessage.Add]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count + 1)\n          },\n          [StackMessage.Remove]() {\n            containers.current.add(element)\n            setNestedDialogCount(count => count - 1)\n          },\n        })\n      }, [])}\n    >\n      <ForcePortalRoot force={true}>\n        <Portal>\n          <DialogContext.Provider value={contextBag}>\n            <Portal.Group target={internalDialogRef}>\n              <ForcePortalRoot force={false}>\n                <DescriptionProvider slot={slot} name=\"Dialog.Description\">\n                  {render({\n                    props: { ...passthroughProps, ...propsWeControl },\n                    slot,\n                    defaultTag: DEFAULT_DIALOG_TAG,\n                    features: DialogRenderFeatures,\n                    visible,\n                    name: 'Dialog',\n                  })}\n                </DescriptionProvider>\n              </ForcePortalRoot>\n            </Portal.Group>\n          </DialogContext.Provider>\n        </Portal>\n      </ForcePortalRoot>\n    </StackProvider>\n  )\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl>, ref: Ref<HTMLDivElement>) {\n  let [{ dialogState, close }] = useDialogContext([Dialog.displayName, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-dialog-overlay-${useId()}`\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      event.stopPropagation()\n      close()\n    },\n    [close]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    name: 'Dialog.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_TITLE_TAG = 'h2' as const\ninterface TitleRenderPropArg {\n  open: boolean\n}\ntype TitlePropsWeControl = 'id'\n\nfunction Title<TTag extends ElementType = typeof DEFAULT_TITLE_TAG>(\n  props: Props<TTag, TitleRenderPropArg, TitlePropsWeControl>\n) {\n  let [{ dialogState, setTitleId }] = useDialogContext([Dialog.displayName, Title.name].join('.'))\n\n  let id = `headlessui-dialog-title-${useId()}`\n\n  useEffect(() => {\n    setTitleId(id)\n    return () => setTitleId(null)\n  }, [id, setTitleId])\n\n  let slot = useMemo<TitleRenderPropArg>(() => ({ open: dialogState === DialogStates.Open }), [\n    dialogState,\n  ])\n  let propsWeControl = { id }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_TITLE_TAG,\n    name: 'Dialog.Title',\n  })\n}\n\n// ---\n\nexport let Dialog = Object.assign(DialogRoot, { Overlay, Title, Description })\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#disclosure\nimport React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum DisclosureStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  disclosureState: DisclosureStates\n\n  linkedPanel: boolean\n\n  buttonId: string\n  panelId: string\n}\n\nenum ActionTypes {\n  ToggleDisclosure,\n\n  SetButtonId,\n  SetPanelId,\n\n  LinkPanel,\n  UnlinkPanel,\n}\n\ntype Actions =\n  | { type: ActionTypes.ToggleDisclosure }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n  | { type: ActionTypes.LinkPanel }\n  | { type: ActionTypes.UnlinkPanel }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.ToggleDisclosure]: state => ({\n    ...state,\n    disclosureState: match(state.disclosureState, {\n      [DisclosureStates.Open]: DisclosureStates.Closed,\n      [DisclosureStates.Closed]: DisclosureStates.Open,\n    }),\n  }),\n  [ActionTypes.LinkPanel](state) {\n    if (state.linkedPanel === true) return state\n    return { ...state, linkedPanel: true }\n  },\n  [ActionTypes.UnlinkPanel](state) {\n    if (state.linkedPanel === false) return state\n    return { ...state, linkedPanel: false }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet DisclosureContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nDisclosureContext.displayName = 'DisclosureContext'\n\nfunction useDisclosureContext(component: string) {\n  let context = useContext(DisclosureContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Disclosure.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useDisclosureContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_DISCLOSURE_TAG = Fragment\ninterface DisclosureRenderPropArg {\n  open: boolean\n}\n\nexport function Disclosure<TTag extends ElementType = typeof DEFAULT_DISCLOSURE_TAG>(\n  props: Props<TTag, DisclosureRenderPropArg> & {\n    defaultOpen?: boolean\n  }\n) {\n  let { defaultOpen = false, ...passthroughProps } = props\n  let buttonId = `headlessui-disclosure-button-${useId()}`\n  let panelId = `headlessui-disclosure-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    disclosureState: defaultOpen ? DisclosureStates.Open : DisclosureStates.Closed,\n    linkedPanel: false,\n    buttonId,\n    panelId,\n  } as StateDefinition)\n  let [{ disclosureState }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let slot = useMemo<DisclosureRenderPropArg>(\n    () => ({ open: disclosureState === DisclosureStates.Open }),\n    [disclosureState]\n  )\n\n  return (\n    <DisclosureContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(disclosureState, {\n          [DisclosureStates.Open]: State.Open,\n          [DisclosureStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passthroughProps,\n          slot,\n          defaultTag: DEFAULT_DISCLOSURE_TAG,\n          name: 'Disclosure',\n        })}\n      </OpenClosedProvider>\n    </DisclosureContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(ref)\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        case Keys.Space:\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.ToggleDisclosure })\n          break\n      }\n    },\n    [dispatch]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      dispatch({ type: ActionTypes.ToggleDisclosure })\n    },\n    [dispatch, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id: state.buttonId,\n    type: 'button',\n    'aria-expanded': state.disclosureState === DisclosureStates.Open ? true : undefined,\n    'aria-controls': state.linkedPanel ? state.panelId : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Disclosure.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useDisclosureContext([Disclosure.name, Panel.name].join('.'))\n  let panelRef = useSyncRefs(ref, () => {\n    if (state.linkedPanel) return\n    dispatch({ type: ActionTypes.LinkPanel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.disclosureState === DisclosureStates.Open\n  })()\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.UnlinkPanel }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.disclosureState === DisclosureStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.UnlinkPanel })\n    }\n  }, [state.disclosureState, props.unmount, dispatch])\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.disclosureState === DisclosureStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_PANEL_TAG,\n    features: PanelRenderFeatures,\n    visible,\n    name: 'Disclosure.Panel',\n  })\n})\n\n// ---\n\nDisclosure.Button = Button\nDisclosure.Panel = Panel\n","import {\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useFocusTrap, Features as FocusTrapFeatures } from '../../hooks/use-focus-trap'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\nlet DEFAULT_FOCUS_TRAP_TAG = 'div' as const\n\nexport function FocusTrap<TTag extends ElementType = typeof DEFAULT_FOCUS_TRAP_TAG>(\n  props: Props<TTag> & { initialFocus?: MutableRefObject<HTMLElement | null> }\n) {\n  let container = useRef<HTMLElement | null>(null)\n  let { initialFocus, ...passthroughProps } = props\n\n  let ready = useServerHandoffComplete()\n  useFocusTrap(container, ready ? FocusTrapFeatures.All : FocusTrapFeatures.None, { initialFocus })\n\n  let propsWeControl = {\n    ref: container,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    defaultTag: DEFAULT_FOCUS_TRAP_TAG,\n    name: 'FocusTrap',\n  })\n}\n","function assertNever(x: never): never {\n  throw new Error('Unexpected object: ' + x)\n}\n\nexport enum Focus {\n  /** Focus the first non-disabled item. */\n  First,\n\n  /** Focus the previous non-disabled item. */\n  Previous,\n\n  /** Focus the next non-disabled item. */\n  Next,\n\n  /** Focus the last non-disabled item. */\n  Last,\n\n  /** Focus a specific item based on the `id` of the item. */\n  Specific,\n\n  /** Focus no items at all. */\n  Nothing,\n}\n\nexport function calculateActiveIndex<TItem>(\n  action: { focus: Focus.Specific; id: string } | { focus: Exclude<Focus, Focus.Specific> },\n  resolvers: {\n    resolveItems(): TItem[]\n    resolveActiveIndex(): number | null\n    resolveId(item: TItem): string\n    resolveDisabled(item: TItem): boolean\n  }\n) {\n  let items = resolvers.resolveItems()\n  if (items.length <= 0) return null\n\n  let currentActiveIndex = resolvers.resolveActiveIndex()\n  let activeIndex = currentActiveIndex ?? -1\n\n  let nextActiveIndex = (() => {\n    switch (action.focus) {\n      case Focus.First:\n        return items.findIndex(item => !resolvers.resolveDisabled(item))\n\n      case Focus.Previous: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex((item, idx, all) => {\n            if (activeIndex !== -1 && all.length - idx - 1 >= activeIndex) return false\n            return !resolvers.resolveDisabled(item)\n          })\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Next:\n        return items.findIndex((item, idx) => {\n          if (idx <= activeIndex) return false\n          return !resolvers.resolveDisabled(item)\n        })\n\n      case Focus.Last: {\n        let idx = items\n          .slice()\n          .reverse()\n          .findIndex(item => !resolvers.resolveDisabled(item))\n        if (idx === -1) return idx\n        return items.length - 1 - idx\n      }\n\n      case Focus.Specific:\n        return items.findIndex(item => resolvers.resolveId(item) === action.id)\n\n      case Focus.Nothing:\n        return null\n\n      default:\n        assertNever(action)\n    }\n  })()\n\n  return nextActiveIndex === -1 ? currentActiveIndex : nextActiveIndex\n}\n","import React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useId } from '../../hooks/use-id'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useComputed } from '../../hooks/use-computed'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { Props } from '../../types'\nimport { Features, forwardRefWithAs, PropsForFeatures, render } from '../../utils/render'\nimport { match } from '../../utils/match'\nimport { disposables } from '../../utils/disposables'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\n\nenum ListboxStates {\n  Open,\n  Closed,\n}\n\ntype ListboxOptionDataRef = MutableRefObject<{\n  textValue?: string\n  disabled: boolean\n  value: unknown\n}>\n\ninterface StateDefinition {\n  listboxState: ListboxStates\n  propsRef: MutableRefObject<{ value: unknown; onChange(value: unknown): void }>\n  labelRef: MutableRefObject<HTMLLabelElement | null>\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  optionsRef: MutableRefObject<HTMLUListElement | null>\n  disabled: boolean\n  options: { id: string; dataRef: ListboxOptionDataRef }[]\n  searchQuery: string\n  activeOptionIndex: number | null\n}\n\nenum ActionTypes {\n  OpenListbox,\n  CloseListbox,\n\n  SetDisabled,\n\n  GoToOption,\n  Search,\n  ClearSearch,\n\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseListbox }\n  | { type: ActionTypes.OpenListbox }\n  | { type: ActionTypes.SetDisabled; disabled: boolean }\n  | { type: ActionTypes.GoToOption; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToOption; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterOption; id: string; dataRef: ListboxOptionDataRef }\n  | { type: ActionTypes.UnregisterOption; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    return { ...state, activeOptionIndex: null, listboxState: ListboxStates.Closed }\n  },\n  [ActionTypes.OpenListbox](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Open) return state\n    return { ...state, listboxState: ListboxStates.Open }\n  },\n  [ActionTypes.SetDisabled](state, action) {\n    if (state.disabled === action.disabled) return state\n    return { ...state, disabled: action.disabled }\n  },\n  [ActionTypes.GoToOption](state, action) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let activeOptionIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.options,\n      resolveActiveIndex: () => state.activeOptionIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeOptionIndex === activeOptionIndex) return state\n    return { ...state, searchQuery: '', activeOptionIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.options.findIndex(\n      option =>\n        !option.dataRef.current.disabled &&\n        option.dataRef.current.textValue?.startsWith(searchQuery)\n    )\n\n    if (match === -1 || match === state.activeOptionIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeOptionIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.disabled) return state\n    if (state.listboxState === ListboxStates.Closed) return state\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterOption]: (state, action) => ({\n    ...state,\n    options: [...state.options, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterOption]: (state, action) => {\n    let nextOptions = state.options.slice()\n    let currentActiveOption =\n      state.activeOptionIndex !== null ? nextOptions[state.activeOptionIndex] : null\n\n    let idx = nextOptions.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextOptions.splice(idx, 1)\n\n    return {\n      ...state,\n      options: nextOptions,\n      activeOptionIndex: (() => {\n        if (idx === state.activeOptionIndex) return null\n        if (currentActiveOption === null) return null\n\n        // If we removed the option before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextOptions.indexOf(currentActiveOption)\n      })(),\n    }\n  },\n}\n\nlet ListboxContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nListboxContext.displayName = 'ListboxContext'\n\nfunction useListboxContext(component: string) {\n  let context = useContext(ListboxContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Listbox.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useListboxContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_LISTBOX_TAG = Fragment\ninterface ListboxRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\n\nexport function Listbox<TTag extends ElementType = typeof DEFAULT_LISTBOX_TAG, TType = string>(\n  props: Props<TTag, ListboxRenderPropArg, 'value' | 'onChange'> & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let reducerBag = useReducer(stateReducer, {\n    listboxState: ListboxStates.Closed,\n    propsRef: { current: { value, onChange } },\n    labelRef: createRef(),\n    buttonRef: createRef(),\n    optionsRef: createRef(),\n    disabled,\n    options: [],\n    searchQuery: '',\n    activeOptionIndex: null,\n  } as StateDefinition)\n  let [{ listboxState, propsRef, optionsRef, buttonRef }, dispatch] = reducerBag\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.onChange = onChange\n  }, [onChange, propsRef])\n  useIsoMorphicEffect(() => dispatch({ type: ActionTypes.SetDisabled, disabled }), [disabled])\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (listboxState !== ListboxStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (optionsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseListbox })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<ListboxRenderPropArg>(\n    () => ({ open: listboxState === ListboxStates.Open, disabled }),\n    [listboxState, disabled]\n  )\n\n  return (\n    <ListboxContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(listboxState, {\n          [ListboxStates.Open]: State.Open,\n          [ListboxStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props: passThroughProps,\n          slot,\n          defaultTag: DEFAULT_LISTBOX_TAG,\n          name: 'Listbox',\n        })}\n      </OpenClosedProvider>\n    </ListboxContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'aria-labelledby'\n  | 'disabled'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-listbox-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n          })\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          dispatch({ type: ActionTypes.OpenListbox })\n          d.nextFrame(() => {\n            if (!state.propsRef.current.value)\n              dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n          })\n          break\n      }\n    },\n    [dispatch, state, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (state.listboxState === ListboxStates.Open) {\n        dispatch({ type: ActionTypes.CloseListbox })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        dispatch({ type: ActionTypes.OpenListbox })\n      }\n    },\n    [dispatch, d, state]\n  )\n\n  let labelledby = useComputed(() => {\n    if (!state.labelRef.current) return undefined\n    return [state.labelRef.current.id, id].join(' ')\n  }, [state.labelRef.current, id])\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.optionsRef.current?.id,\n    'aria-expanded': state.listboxState === ListboxStates.Open ? true : undefined,\n    'aria-labelledby': labelledby,\n    disabled: state.disabled,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Listbox.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {\n  open: boolean\n  disabled: boolean\n}\ntype LabelPropsWeControl = 'id' | 'ref' | 'onClick'\n\nfunction Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl>\n) {\n  let [state] = useListboxContext([Listbox.name, Label.name].join('.'))\n  let id = `headlessui-listbox-label-${useId()}`\n\n  let handleClick = useCallback(() => state.buttonRef.current?.focus({ preventScroll: true }), [\n    state.buttonRef,\n  ])\n\n  let slot = useMemo<LabelRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open, disabled: state.disabled }),\n    [state]\n  )\n  let propsWeControl = { ref: state.labelRef, id, onClick: handleClick }\n  return render({\n    props: { ...props, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: 'Listbox.Label',\n  })\n}\n\n// ---\n\nlet DEFAULT_OPTIONS_TAG = 'ul' as const\ninterface OptionsRenderPropArg {\n  open: boolean\n}\ntype OptionsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet OptionsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Options = forwardRefWithAs(function Options<\n  TTag extends ElementType = typeof DEFAULT_OPTIONS_TAG\n>(\n  props: Props<TTag, OptionsRenderPropArg, OptionsPropsWeControl> &\n    PropsForFeatures<typeof OptionsRenderFeatures>,\n  ref: Ref<HTMLUListElement>\n) {\n  let [state, dispatch] = useListboxContext([Listbox.name, Options.name].join('.'))\n  let optionsRef = useSyncRefs(state.optionsRef, ref)\n\n  let id = `headlessui-listbox-options-${useId()}`\n  let d = useDisposables()\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.listboxState === ListboxStates.Open\n  })()\n\n  useIsoMorphicEffect(() => {\n    let container = state.optionsRef.current\n    if (!container) return\n    if (state.listboxState !== ListboxStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.listboxState, state.optionsRef])\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLUListElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          if (state.activeOptionIndex !== null) {\n            let { dataRef } = state.options[state.activeOptionIndex]\n            state.propsRef.current.onChange(dataRef.current.value)\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseListbox })\n          return d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [d, dispatch, searchDisposables, state]\n  )\n\n  let labelledby = useComputed(() => state.labelRef.current?.id ?? state.buttonRef.current?.id, [\n    state.labelRef.current,\n    state.buttonRef.current,\n  ])\n\n  let slot = useMemo<OptionsRenderPropArg>(\n    () => ({ open: state.listboxState === ListboxStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeOptionIndex === null ? undefined : state.options[state.activeOptionIndex]?.id,\n    'aria-labelledby': labelledby,\n    id,\n    onKeyDown: handleKeyDown,\n    role: 'listbox',\n    tabIndex: 0,\n    ref: optionsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTIONS_TAG,\n    features: OptionsRenderFeatures,\n    visible,\n    name: 'Listbox.Options',\n  })\n})\n\n// ---\n\nlet DEFAULT_OPTION_TAG = 'li' as const\ninterface OptionRenderPropArg {\n  active: boolean\n  selected: boolean\n  disabled: boolean\n}\ntype ListboxOptionPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'aria-selected'\n  | 'onPointerLeave'\n  | 'onMouseLeave'\n  | 'onPointerMove'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in Listbox itself.\n  // But today is not that day..\n  TType = Parameters<typeof Listbox>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, ListboxOptionPropsWeControl | 'value'> & {\n    disabled?: boolean\n    value: TType\n  }\n) {\n  let { disabled = false, value, ...passthroughProps } = props\n  let [state, dispatch] = useListboxContext([Listbox.name, Option.name].join('.'))\n  let id = `headlessui-listbox-option-${useId()}`\n  let active =\n    state.activeOptionIndex !== null ? state.options[state.activeOptionIndex].id === id : false\n  let selected = state.propsRef.current.value === value\n\n  let bag = useRef<ListboxOptionDataRef['current']>({ disabled, value })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n  useIsoMorphicEffect(() => {\n    bag.current.value = value\n  }, [bag, value])\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  let select = useCallback(() => state.propsRef.current.onChange(value), [state.propsRef, value])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterOption, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterOption, id })\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!selected) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n    document.getElementById(id)?.focus?.()\n  }, [state.listboxState])\n\n  useIsoMorphicEffect(() => {\n    if (state.listboxState !== ListboxStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.listboxState])\n\n  let handleClick = useCallback(\n    (event: { preventDefault: Function }) => {\n      if (disabled) return event.preventDefault()\n      select()\n      dispatch({ type: ActionTypes.CloseListbox })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n    },\n    [dispatch, state.buttonRef, disabled, select]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToOption, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<OptionRenderPropArg>(() => ({ active, selected, disabled }), [\n    active,\n    selected,\n    disabled,\n  ])\n  let propsWeControl = {\n    id,\n    role: 'option',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    'aria-selected': selected === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OPTION_TAG,\n    name: 'Listbox.Option',\n  })\n}\n\n// ---\n\nListbox.Button = Button\nListbox.Label = Label\nListbox.Options = Options\nListbox.Option = Option\n","export function disposables() {\n  let disposables: Function[] = []\n\n  let api = {\n    requestAnimationFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      let raf = requestAnimationFrame(...args)\n      api.add(() => cancelAnimationFrame(raf))\n    },\n\n    nextFrame(...args: Parameters<typeof requestAnimationFrame>) {\n      api.requestAnimationFrame(() => {\n        api.requestAnimationFrame(...args)\n      })\n    },\n\n    setTimeout(...args: Parameters<typeof setTimeout>) {\n      let timer = setTimeout(...args)\n      api.add(() => clearTimeout(timer))\n    },\n\n    add(cb: () => void) {\n      disposables.push(cb)\n    },\n\n    dispose() {\n      for (let dispose of disposables.splice(0)) {\n        dispose()\n      }\n    },\n  }\n\n  return api\n}\n","import { useState, useEffect } from 'react'\n\nimport { disposables } from '../utils/disposables'\n\nexport function useDisposables() {\n  // Using useState instead of useRef so that we can use the initializer function.\n  let [d] = useState(disposables)\n  useEffect(() => () => d.dispose(), [d])\n  return d\n}\n","import { useState, useRef } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\nexport function useComputed<T>(cb: () => T, dependencies: React.DependencyList) {\n  let [value, setValue] = useState(cb)\n  let cbRef = useRef(cb)\n  useIsoMorphicEffect(() => {\n    cbRef.current = cb\n  }, [cb])\n  useIsoMorphicEffect(() => setValue(cbRef.current), [cbRef, setValue, ...dependencies])\n  return value\n}\n","// WAI-ARIA: https://www.w3.org/TR/wai-aria-practices-1.2/#menubutton\nimport React, {\n  Fragment,\n  createContext,\n  createRef,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  MutableRefObject,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { disposables } from '../../utils/disposables'\nimport { useDisposables } from '../../hooks/use-disposables'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { Focus, calculateActiveIndex } from '../../utils/calculate-active-index'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { isFocusableElement, FocusableMode } from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\nimport { useOpenClosed, State, OpenClosedProvider } from '../../internal/open-closed'\n\nenum MenuStates {\n  Open,\n  Closed,\n}\n\ntype MenuItemDataRef = MutableRefObject<{ textValue?: string; disabled: boolean }>\n\ninterface StateDefinition {\n  menuState: MenuStates\n  buttonRef: MutableRefObject<HTMLButtonElement | null>\n  itemsRef: MutableRefObject<HTMLDivElement | null>\n  items: { id: string; dataRef: MenuItemDataRef }[]\n  searchQuery: string\n  activeItemIndex: number | null\n}\n\nenum ActionTypes {\n  OpenMenu,\n  CloseMenu,\n\n  GoToItem,\n  Search,\n  ClearSearch,\n  RegisterItem,\n  UnregisterItem,\n}\n\ntype Actions =\n  | { type: ActionTypes.CloseMenu }\n  | { type: ActionTypes.OpenMenu }\n  | { type: ActionTypes.GoToItem; focus: Focus.Specific; id: string }\n  | { type: ActionTypes.GoToItem; focus: Exclude<Focus, Focus.Specific> }\n  | { type: ActionTypes.Search; value: string }\n  | { type: ActionTypes.ClearSearch }\n  | { type: ActionTypes.RegisterItem; id: string; dataRef: MenuItemDataRef }\n  | { type: ActionTypes.UnregisterItem; id: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.CloseMenu](state) {\n    if (state.menuState === MenuStates.Closed) return state\n    return { ...state, activeItemIndex: null, menuState: MenuStates.Closed }\n  },\n  [ActionTypes.OpenMenu](state) {\n    if (state.menuState === MenuStates.Open) return state\n    return { ...state, menuState: MenuStates.Open }\n  },\n  [ActionTypes.GoToItem]: (state, action) => {\n    let activeItemIndex = calculateActiveIndex(action, {\n      resolveItems: () => state.items,\n      resolveActiveIndex: () => state.activeItemIndex,\n      resolveId: item => item.id,\n      resolveDisabled: item => item.dataRef.current.disabled,\n    })\n\n    if (state.searchQuery === '' && state.activeItemIndex === activeItemIndex) return state\n    return { ...state, searchQuery: '', activeItemIndex }\n  },\n  [ActionTypes.Search]: (state, action) => {\n    let searchQuery = state.searchQuery + action.value.toLowerCase()\n    let match = state.items.findIndex(\n      item =>\n        item.dataRef.current.textValue?.startsWith(searchQuery) && !item.dataRef.current.disabled\n    )\n\n    if (match === -1 || match === state.activeItemIndex) return { ...state, searchQuery }\n    return { ...state, searchQuery, activeItemIndex: match }\n  },\n  [ActionTypes.ClearSearch](state) {\n    if (state.searchQuery === '') return state\n    return { ...state, searchQuery: '' }\n  },\n  [ActionTypes.RegisterItem]: (state, action) => ({\n    ...state,\n    items: [...state.items, { id: action.id, dataRef: action.dataRef }],\n  }),\n  [ActionTypes.UnregisterItem]: (state, action) => {\n    let nextItems = state.items.slice()\n    let currentActiveItem = state.activeItemIndex !== null ? nextItems[state.activeItemIndex] : null\n\n    let idx = nextItems.findIndex(a => a.id === action.id)\n\n    if (idx !== -1) nextItems.splice(idx, 1)\n\n    return {\n      ...state,\n      items: nextItems,\n      activeItemIndex: (() => {\n        if (idx === state.activeItemIndex) return null\n        if (currentActiveItem === null) return null\n\n        // If we removed the item before the actual active index, then it would be out of sync. To\n        // fix this, we will find the correct (new) index position.\n        return nextItems.indexOf(currentActiveItem)\n      })(),\n    }\n  },\n}\n\nlet MenuContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nMenuContext.displayName = 'MenuContext'\n\nfunction useMenuContext(component: string) {\n  let context = useContext(MenuContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Menu.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useMenuContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_MENU_TAG = Fragment\ninterface MenuRenderPropArg {\n  open: boolean\n}\n\nexport function Menu<TTag extends ElementType = typeof DEFAULT_MENU_TAG>(\n  props: Props<TTag, MenuRenderPropArg>\n) {\n  let reducerBag = useReducer(stateReducer, {\n    menuState: MenuStates.Closed,\n    buttonRef: createRef(),\n    itemsRef: createRef(),\n    items: [],\n    searchQuery: '',\n    activeItemIndex: null,\n  } as StateDefinition)\n  let [{ menuState, itemsRef, buttonRef }, dispatch] = reducerBag\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (menuState !== MenuStates.Open) return\n\n    if (buttonRef.current?.contains(target)) return\n    if (itemsRef.current?.contains(target)) return\n\n    dispatch({ type: ActionTypes.CloseMenu })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      buttonRef.current?.focus()\n    }\n  })\n\n  let slot = useMemo<MenuRenderPropArg>(() => ({ open: menuState === MenuStates.Open }), [\n    menuState,\n  ])\n\n  return (\n    <MenuContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(menuState, {\n          [MenuStates.Open]: State.Open,\n          [MenuStates.Closed]: State.Closed,\n        })}\n      >\n        {render({ props, slot, defaultTag: DEFAULT_MENU_TAG, name: 'Menu' })}\n      </OpenClosedProvider>\n    </MenuContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-haspopup'\n  | 'aria-controls'\n  | 'aria-expanded'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Button.name].join('.'))\n  let buttonRef = useSyncRefs(state.buttonRef, ref)\n\n  let id = `headlessui-menu-button-${useId()}`\n  let d = useDisposables()\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-13\n\n        case Keys.Space:\n        case Keys.Enter:\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.First }))\n          break\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.OpenMenu })\n          d.nextFrame(() => dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last }))\n          break\n      }\n    },\n    [dispatch, d]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      if (props.disabled) return\n      if (state.menuState === MenuStates.Open) {\n        dispatch({ type: ActionTypes.CloseMenu })\n        d.nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      } else {\n        event.preventDefault()\n        event.stopPropagation()\n        dispatch({ type: ActionTypes.OpenMenu })\n      }\n    },\n    [dispatch, d, state, props.disabled]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let passthroughProps = props\n  let propsWeControl = {\n    ref: buttonRef,\n    id,\n    type: 'button',\n    'aria-haspopup': true,\n    'aria-controls': state.itemsRef.current?.id,\n    'aria-expanded': state.menuState === MenuStates.Open ? true : undefined,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    onClick: handleClick,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Menu.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEMS_TAG = 'div' as const\ninterface ItemsRenderPropArg {\n  open: boolean\n}\ntype ItemsPropsWeControl =\n  | 'aria-activedescendant'\n  | 'aria-labelledby'\n  | 'id'\n  | 'onKeyDown'\n  | 'role'\n  | 'tabIndex'\n\nlet ItemsRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Items = forwardRefWithAs(function Items<TTag extends ElementType = typeof DEFAULT_ITEMS_TAG>(\n  props: Props<TTag, ItemsRenderPropArg, ItemsPropsWeControl> &\n    PropsForFeatures<typeof ItemsRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [state, dispatch] = useMenuContext([Menu.name, Items.name].join('.'))\n  let itemsRef = useSyncRefs(state.itemsRef, ref)\n\n  let id = `headlessui-menu-items-${useId()}`\n  let searchDisposables = useDisposables()\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.menuState === MenuStates.Open\n  })()\n\n  useEffect(() => {\n    let container = state.itemsRef.current\n    if (!container) return\n    if (state.menuState !== MenuStates.Open) return\n    if (container === document.activeElement) return\n\n    container.focus({ preventScroll: true })\n  }, [state.menuState, state.itemsRef])\n\n  useTreeWalker({\n    container: state.itemsRef.current,\n    enabled: state.menuState === MenuStates.Open,\n    accept(node) {\n      if (node.getAttribute('role') === 'menuitem') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLDivElement>) => {\n      searchDisposables.dispose()\n\n      switch (event.key) {\n        // Ref: https://www.w3.org/TR/wai-aria-practices-1.2/#keyboard-interaction-12\n\n        // @ts-expect-error Fallthrough is expected here\n        case Keys.Space:\n          if (state.searchQuery !== '') {\n            event.preventDefault()\n            event.stopPropagation()\n            return dispatch({ type: ActionTypes.Search, value: event.key })\n          }\n        // When in type ahead mode, fallthrough\n        case Keys.Enter:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          if (state.activeItemIndex !== null) {\n            let { id } = state.items[state.activeItemIndex]\n            document.getElementById(id)?.click()\n          }\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.ArrowDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Next })\n\n        case Keys.ArrowUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Previous })\n\n        case Keys.Home:\n        case Keys.PageUp:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.First })\n\n        case Keys.End:\n        case Keys.PageDown:\n          event.preventDefault()\n          event.stopPropagation()\n          return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Last })\n\n        case Keys.Escape:\n          event.preventDefault()\n          event.stopPropagation()\n          dispatch({ type: ActionTypes.CloseMenu })\n          disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n          break\n\n        case Keys.Tab:\n          event.preventDefault()\n          event.stopPropagation()\n          break\n\n        default:\n          if (event.key.length === 1) {\n            dispatch({ type: ActionTypes.Search, value: event.key })\n            searchDisposables.setTimeout(() => dispatch({ type: ActionTypes.ClearSearch }), 350)\n          }\n          break\n      }\n    },\n    [dispatch, searchDisposables, state]\n  )\n\n  let handleKeyUp = useCallback((event: ReactKeyboardEvent<HTMLButtonElement>) => {\n    switch (event.key) {\n      case Keys.Space:\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n        break\n    }\n  }, [])\n\n  let slot = useMemo<ItemsRenderPropArg>(() => ({ open: state.menuState === MenuStates.Open }), [\n    state,\n  ])\n  let propsWeControl = {\n    'aria-activedescendant':\n      state.activeItemIndex === null ? undefined : state.items[state.activeItemIndex]?.id,\n    'aria-labelledby': state.buttonRef.current?.id,\n    id,\n    onKeyDown: handleKeyDown,\n    onKeyUp: handleKeyUp,\n    role: 'menu',\n    tabIndex: 0,\n    ref: itemsRef,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEMS_TAG,\n    features: ItemsRenderFeatures,\n    visible,\n    name: 'Menu.Items',\n  })\n})\n\n// ---\n\nlet DEFAULT_ITEM_TAG = Fragment\ninterface ItemRenderPropArg {\n  active: boolean\n  disabled: boolean\n}\ntype MenuItemPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-disabled'\n  | 'onPointerLeave'\n  | 'onPointerMove'\n  | 'onMouseLeave'\n  | 'onMouseMove'\n  | 'onFocus'\n\nfunction Item<TTag extends ElementType = typeof DEFAULT_ITEM_TAG>(\n  props: Props<TTag, ItemRenderPropArg, MenuItemPropsWeControl> & {\n    disabled?: boolean\n    onClick?: (event: { preventDefault: Function }) => void\n  }\n) {\n  let { disabled = false, onClick, ...passthroughProps } = props\n  let [state, dispatch] = useMenuContext([Menu.name, Item.name].join('.'))\n  let id = `headlessui-menu-item-${useId()}`\n  let active = state.activeItemIndex !== null ? state.items[state.activeItemIndex].id === id : false\n\n  useIsoMorphicEffect(() => {\n    if (state.menuState !== MenuStates.Open) return\n    if (!active) return\n    let d = disposables()\n    d.nextFrame(() => document.getElementById(id)?.scrollIntoView?.({ block: 'nearest' }))\n    return d.dispose\n  }, [id, active, state.menuState])\n\n  let bag = useRef<MenuItemDataRef['current']>({ disabled })\n\n  useIsoMorphicEffect(() => {\n    bag.current.disabled = disabled\n  }, [bag, disabled])\n\n  useIsoMorphicEffect(() => {\n    bag.current.textValue = document.getElementById(id)?.textContent?.toLowerCase()\n  }, [bag, id])\n\n  useIsoMorphicEffect(() => {\n    dispatch({ type: ActionTypes.RegisterItem, id, dataRef: bag })\n    return () => dispatch({ type: ActionTypes.UnregisterItem, id })\n  }, [bag, id])\n\n  let handleClick = useCallback(\n    (event: MouseEvent) => {\n      if (disabled) return event.preventDefault()\n      dispatch({ type: ActionTypes.CloseMenu })\n      disposables().nextFrame(() => state.buttonRef.current?.focus({ preventScroll: true }))\n      if (onClick) return onClick(event)\n    },\n    [dispatch, state.buttonRef, disabled, onClick]\n  )\n\n  let handleFocus = useCallback(() => {\n    if (disabled) return dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, id, dispatch])\n\n  let handleMove = useCallback(() => {\n    if (disabled) return\n    if (active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Specific, id })\n  }, [disabled, active, id, dispatch])\n\n  let handleLeave = useCallback(() => {\n    if (disabled) return\n    if (!active) return\n    dispatch({ type: ActionTypes.GoToItem, focus: Focus.Nothing })\n  }, [disabled, active, dispatch])\n\n  let slot = useMemo<ItemRenderPropArg>(() => ({ active, disabled }), [active, disabled])\n  let propsWeControl = {\n    id,\n    role: 'menuitem',\n    tabIndex: -1,\n    'aria-disabled': disabled === true ? true : undefined,\n    onClick: handleClick,\n    onFocus: handleFocus,\n    onPointerMove: handleMove,\n    onMouseMove: handleMove,\n    onPointerLeave: handleLeave,\n    onMouseLeave: handleLeave,\n  }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_ITEM_TAG,\n    name: 'Menu.Item',\n  })\n}\n\n// ---\n\nMenu.Button = Button\nMenu.Items = Items\nMenu.Item = Item\n","import { useRef, useEffect } from 'react'\nimport { useIsoMorphicEffect } from './use-iso-morphic-effect'\n\ntype AcceptNode = (\n  node: HTMLElement\n) =>\n  | typeof NodeFilter.FILTER_ACCEPT\n  | typeof NodeFilter.FILTER_SKIP\n  | typeof NodeFilter.FILTER_REJECT\n\nexport function useTreeWalker({\n  container,\n  accept,\n  walk,\n  enabled = true,\n}: {\n  container: HTMLElement | null\n  accept: AcceptNode\n  walk(node: HTMLElement): void\n  enabled?: boolean\n}) {\n  let acceptRef = useRef(accept)\n  let walkRef = useRef(walk)\n\n  useEffect(() => {\n    acceptRef.current = accept\n    walkRef.current = walk\n  }, [accept, walk])\n\n  useIsoMorphicEffect(() => {\n    if (!container) return\n    if (!enabled) return\n\n    let accept = acceptRef.current\n    let walk = walkRef.current\n\n    let acceptNode = Object.assign((node: HTMLElement) => accept(node), { acceptNode: accept })\n    let walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, acceptNode, false)\n\n    while (walker.nextNode()) walk(walker.currentNode as HTMLElement)\n  }, [container, enabled, acceptRef, walkRef])\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n\n  // Types\n  ContextType,\n  Dispatch,\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n  Ref,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { match } from '../../utils/match'\nimport { forwardRefWithAs, render, Features, PropsForFeatures } from '../../utils/render'\nimport { useSyncRefs } from '../../hooks/use-sync-refs'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport {\n  getFocusableElements,\n  Focus,\n  focusIn,\n  FocusResult,\n  isFocusableElement,\n  FocusableMode,\n} from '../../utils/focus-management'\nimport { useWindowEvent } from '../../hooks/use-window-event'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\n\nenum PopoverStates {\n  Open,\n  Closed,\n}\n\ninterface StateDefinition {\n  popoverState: PopoverStates\n\n  button: HTMLElement | null\n  buttonId: string\n  panel: HTMLElement | null\n  panelId: string\n}\n\nenum ActionTypes {\n  TogglePopover,\n  ClosePopover,\n\n  SetButton,\n  SetButtonId,\n  SetPanel,\n  SetPanelId,\n}\n\ntype Actions =\n  | { type: ActionTypes.TogglePopover }\n  | { type: ActionTypes.ClosePopover }\n  | { type: ActionTypes.SetButton; button: HTMLElement | null }\n  | { type: ActionTypes.SetButtonId; buttonId: string }\n  | { type: ActionTypes.SetPanel; panel: HTMLElement | null }\n  | { type: ActionTypes.SetPanelId; panelId: string }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.TogglePopover]: state => ({\n    ...state,\n    popoverState: match(state.popoverState, {\n      [PopoverStates.Open]: PopoverStates.Closed,\n      [PopoverStates.Closed]: PopoverStates.Open,\n    }),\n  }),\n  [ActionTypes.ClosePopover](state) {\n    if (state.popoverState === PopoverStates.Closed) return state\n    return { ...state, popoverState: PopoverStates.Closed }\n  },\n  [ActionTypes.SetButton](state, action) {\n    if (state.button === action.button) return state\n    return { ...state, button: action.button }\n  },\n  [ActionTypes.SetButtonId](state, action) {\n    if (state.buttonId === action.buttonId) return state\n    return { ...state, buttonId: action.buttonId }\n  },\n  [ActionTypes.SetPanel](state, action) {\n    if (state.panel === action.panel) return state\n    return { ...state, panel: action.panel }\n  },\n  [ActionTypes.SetPanelId](state, action) {\n    if (state.panelId === action.panelId) return state\n    return { ...state, panelId: action.panelId }\n  },\n}\n\nlet PopoverContext = createContext<[StateDefinition, Dispatch<Actions>] | null>(null)\nPopoverContext.displayName = 'PopoverContext'\n\nfunction usePopoverContext(component: string) {\n  let context = useContext(PopoverContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${Popover.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, usePopoverContext)\n    throw err\n  }\n  return context\n}\n\nlet PopoverGroupContext = createContext<{\n  registerPopover(registerbag: PopoverRegisterBag): void\n  unregisterPopover(registerbag: PopoverRegisterBag): void\n  isFocusWithinPopoverGroup(): boolean\n  closeOthers(buttonId: string): void\n} | null>(null)\nPopoverGroupContext.displayName = 'PopoverGroupContext'\n\nfunction usePopoverGroupContext() {\n  return useContext(PopoverGroupContext)\n}\n\nlet PopoverPanelContext = createContext<string | null>(null)\nPopoverPanelContext.displayName = 'PopoverPanelContext'\n\nfunction usePopoverPanelContext() {\n  return useContext(PopoverPanelContext)\n}\n\ninterface PopoverRegisterBag {\n  buttonId: string\n  panelId: string\n  close(): void\n}\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_POPOVER_TAG = 'div' as const\ninterface PopoverRenderPropArg {\n  open: boolean\n}\n\nexport function Popover<TTag extends ElementType = typeof DEFAULT_POPOVER_TAG>(\n  props: Props<TTag, PopoverRenderPropArg>\n) {\n  let buttonId = `headlessui-popover-button-${useId()}`\n  let panelId = `headlessui-popover-panel-${useId()}`\n\n  let reducerBag = useReducer(stateReducer, {\n    popoverState: PopoverStates.Closed,\n    button: null,\n    buttonId,\n    panel: null,\n    panelId,\n  } as StateDefinition)\n  let [{ popoverState, button, panel }, dispatch] = reducerBag\n\n  useEffect(() => dispatch({ type: ActionTypes.SetButtonId, buttonId }), [buttonId, dispatch])\n  useEffect(() => dispatch({ type: ActionTypes.SetPanelId, panelId }), [panelId, dispatch])\n\n  let registerBag = useMemo(\n    () => ({ buttonId, panelId, close: () => dispatch({ type: ActionTypes.ClosePopover }) }),\n    [buttonId, panelId, dispatch]\n  )\n\n  let groupContext = usePopoverGroupContext()\n  let registerPopover = groupContext?.registerPopover\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    return (\n      groupContext?.isFocusWithinPopoverGroup() ??\n      (button?.contains(document.activeElement) || panel?.contains(document.activeElement))\n    )\n  }, [groupContext, button, panel])\n\n  useEffect(() => registerPopover?.(registerBag), [registerPopover, registerBag])\n\n  // Handle focus out\n  useWindowEvent(\n    'focus',\n    () => {\n      if (popoverState !== PopoverStates.Open) return\n      if (isFocusWithinPopoverGroup()) return\n      if (!button) return\n      if (!panel) return\n\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  // Handle outside click\n  useWindowEvent('mousedown', event => {\n    let target = event.target as HTMLElement\n\n    if (popoverState !== PopoverStates.Open) return\n\n    if (button?.contains(target)) return\n    if (panel?.contains(target)) return\n\n    dispatch({ type: ActionTypes.ClosePopover })\n\n    if (!isFocusableElement(target, FocusableMode.Loose)) {\n      event.preventDefault()\n      button?.focus()\n    }\n  })\n\n  let slot = useMemo<PopoverRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n\n  return (\n    <PopoverContext.Provider value={reducerBag}>\n      <OpenClosedProvider\n        value={match(popoverState, {\n          [PopoverStates.Open]: State.Open,\n          [PopoverStates.Closed]: State.Closed,\n        })}\n      >\n        {render({\n          props,\n          slot,\n          defaultTag: DEFAULT_POPOVER_TAG,\n          name: 'Popover',\n        })}\n      </OpenClosedProvider>\n    </PopoverContext.Provider>\n  )\n}\n\n// ---\n\nlet DEFAULT_BUTTON_TAG = 'button' as const\ninterface ButtonRenderPropArg {\n  open: boolean\n}\ntype ButtonPropsWeControl =\n  | 'id'\n  | 'type'\n  | 'aria-expanded'\n  | 'aria-controls'\n  | 'onKeyDown'\n  | 'onClick'\n\nlet Button = forwardRefWithAs(function Button<TTag extends ElementType = typeof DEFAULT_BUTTON_TAG>(\n  props: Props<TTag, ButtonRenderPropArg, ButtonPropsWeControl>,\n  ref: Ref<HTMLButtonElement>\n) {\n  let [state, dispatch] = usePopoverContext([Popover.name, Button.name].join('.'))\n  let internalButtonRef = useRef<HTMLButtonElement | null>(null)\n\n  let groupContext = usePopoverGroupContext()\n  let closeOthers = groupContext?.closeOthers\n\n  let panelContext = usePopoverPanelContext()\n  let isWithinPanel = panelContext === null ? false : panelContext === state.panelId\n\n  let buttonRef = useSyncRefs(\n    internalButtonRef,\n    ref,\n    isWithinPanel ? null : button => dispatch({ type: ActionTypes.SetButton, button })\n  )\n\n  // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n  let activeElementRef = useRef<Element | null>(null)\n  let previousActiveElementRef = useRef<Element | null>(\n    typeof window === 'undefined' ? null : document.activeElement\n  )\n  useWindowEvent(\n    'focus',\n    () => {\n      previousActiveElementRef.current = activeElementRef.current\n      activeElementRef.current = document.activeElement\n    },\n    true\n  )\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) {\n        if (state.popoverState === PopoverStates.Closed) return\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            dispatch({ type: ActionTypes.ClosePopover })\n            state.button?.focus() // Re-focus the original opening Button\n            break\n        }\n      } else {\n        switch (event.key) {\n          case Keys.Space:\n          case Keys.Enter:\n            event.preventDefault() // Prevent triggering a *click* event\n            event.stopPropagation()\n            if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n            dispatch({ type: ActionTypes.TogglePopover })\n            break\n\n          case Keys.Escape:\n            if (state.popoverState !== PopoverStates.Open) return closeOthers?.(state.buttonId)\n            if (!internalButtonRef.current) return\n            if (!internalButtonRef.current.contains(document.activeElement)) return\n            dispatch({ type: ActionTypes.ClosePopover })\n            break\n\n          case Keys.Tab:\n            if (state.popoverState !== PopoverStates.Open) return\n            if (!state.panel) return\n            if (!state.button) return\n\n            // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n            if (event.shiftKey) {\n              // Check if the last focused element exists, and check that it is not inside button or panel itself\n              if (!previousActiveElementRef.current) return\n              if (state.button?.contains(previousActiveElementRef.current)) return\n              if (state.panel.contains(previousActiveElementRef.current)) return\n\n              // Check if the last focused element is *after* the button in the DOM\n              let focusableElements = getFocusableElements()\n              let previousIdx = focusableElements.indexOf(\n                previousActiveElementRef.current as HTMLElement\n              )\n              let buttonIdx = focusableElements.indexOf(state.button)\n              if (buttonIdx > previousIdx) return\n\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.Last)\n            } else {\n              event.preventDefault()\n              event.stopPropagation()\n\n              focusIn(state.panel, Focus.First)\n            }\n\n            break\n        }\n      }\n    },\n    [\n      dispatch,\n      state.popoverState,\n      state.buttonId,\n      state.button,\n      state.panel,\n      internalButtonRef,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      if (isWithinPanel) return\n      if (event.key === Keys.Space) {\n        // Required for firefox, event.preventDefault() in handleKeyDown for\n        // the Space key doesn't cancel the handleKeyUp, which in turn\n        // triggers a *click*.\n        event.preventDefault()\n      }\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!state.panel) return\n      if (!state.button) return\n\n      // TODO: Revisit when handling Tab/Shift+Tab when using Portal's\n      switch (event.key) {\n        case Keys.Tab:\n          // Check if the last focused element exists, and check that it is not inside button or panel itself\n          if (!previousActiveElementRef.current) return\n          if (state.button?.contains(previousActiveElementRef.current)) return\n          if (state.panel.contains(previousActiveElementRef.current)) return\n\n          // Check if the last focused element is *after* the button in the DOM\n          let focusableElements = getFocusableElements()\n          let previousIdx = focusableElements.indexOf(\n            previousActiveElementRef.current as HTMLElement\n          )\n          let buttonIdx = focusableElements.indexOf(state.button)\n          if (buttonIdx > previousIdx) return\n\n          event.preventDefault()\n          event.stopPropagation()\n          focusIn(state.panel, Focus.Last)\n          break\n      }\n    },\n    [state.popoverState, state.panel, state.button, isWithinPanel]\n  )\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return\n      if (props.disabled) return\n      if (isWithinPanel) {\n        dispatch({ type: ActionTypes.ClosePopover })\n        state.button?.focus() // Re-focus the original opening Button\n      } else {\n        if (state.popoverState === PopoverStates.Closed) closeOthers?.(state.buttonId)\n        state.button?.focus()\n        dispatch({ type: ActionTypes.TogglePopover })\n      }\n    },\n    [\n      dispatch,\n      state.button,\n      state.popoverState,\n      state.buttonId,\n      props.disabled,\n      closeOthers,\n      isWithinPanel,\n    ]\n  )\n\n  let slot = useMemo<ButtonRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n\n  let passthroughProps = props\n  let propsWeControl = isWithinPanel\n    ? {\n        type: 'button',\n        onKeyDown: handleKeyDown,\n        onClick: handleClick,\n      }\n    : {\n        ref: buttonRef,\n        id: state.buttonId,\n        type: 'button',\n        'aria-expanded': state.popoverState === PopoverStates.Open ? true : undefined,\n        'aria-controls': state.panel ? state.panelId : undefined,\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp,\n        onClick: handleClick,\n      }\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_BUTTON_TAG,\n    name: 'Popover.Button',\n  })\n})\n\n// ---\n\nlet DEFAULT_OVERLAY_TAG = 'div' as const\ninterface OverlayRenderPropArg {\n  open: boolean\n}\ntype OverlayPropsWeControl = 'id' | 'aria-hidden' | 'onClick'\n\nlet OverlayRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Overlay = forwardRefWithAs(function Overlay<\n  TTag extends ElementType = typeof DEFAULT_OVERLAY_TAG\n>(\n  props: Props<TTag, OverlayRenderPropArg, OverlayPropsWeControl> &\n    PropsForFeatures<typeof OverlayRenderFeatures>,\n  ref: Ref<HTMLDivElement>\n) {\n  let [{ popoverState }, dispatch] = usePopoverContext([Popover.name, Overlay.name].join('.'))\n  let overlayRef = useSyncRefs(ref)\n\n  let id = `headlessui-popover-overlay-${useId()}`\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return popoverState === PopoverStates.Open\n  })()\n\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    [dispatch]\n  )\n\n  let slot = useMemo<OverlayRenderPropArg>(() => ({ open: popoverState === PopoverStates.Open }), [\n    popoverState,\n  ])\n  let propsWeControl = {\n    ref: overlayRef,\n    id,\n    'aria-hidden': true,\n    onClick: handleClick,\n  }\n  let passthroughProps = props\n\n  return render({\n    props: { ...passthroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_OVERLAY_TAG,\n    features: OverlayRenderFeatures,\n    visible,\n    name: 'Popover.Overlay',\n  })\n})\n\n// ---\n\nlet DEFAULT_PANEL_TAG = 'div' as const\ninterface PanelRenderPropArg {\n  open: boolean\n}\ntype PanelPropsWeControl = 'id' | 'onKeyDown'\n\nlet PanelRenderFeatures = Features.RenderStrategy | Features.Static\n\nlet Panel = forwardRefWithAs(function Panel<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, PanelRenderPropArg, PanelPropsWeControl> &\n    PropsForFeatures<typeof PanelRenderFeatures> & { focus?: boolean },\n  ref: Ref<HTMLDivElement>\n) {\n  let { focus = false, ...passthroughProps } = props\n\n  let [state, dispatch] = usePopoverContext([Popover.name, Panel.name].join('.'))\n  let internalPanelRef = useRef<HTMLDivElement | null>(null)\n  let panelRef = useSyncRefs(internalPanelRef, ref, panel => {\n    dispatch({ type: ActionTypes.SetPanel, panel })\n  })\n\n  let usesOpenClosedState = useOpenClosed()\n  let visible = (() => {\n    if (usesOpenClosedState !== null) {\n      return usesOpenClosedState === State.Open\n    }\n\n    return state.popoverState === PopoverStates.Open\n  })()\n\n  let handleKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      switch (event.key) {\n        case Keys.Escape:\n          if (state.popoverState !== PopoverStates.Open) return\n          if (!internalPanelRef.current) return\n          if (!internalPanelRef.current.contains(document.activeElement)) return\n          event.preventDefault()\n          dispatch({ type: ActionTypes.ClosePopover })\n          state.button?.focus()\n          break\n      }\n    },\n    [state, internalPanelRef, dispatch]\n  )\n\n  // Unlink on \"unmount\" myself\n  useEffect(() => () => dispatch({ type: ActionTypes.SetPanel, panel: null }), [dispatch])\n\n  // Unlink on \"unmount\" children\n  useEffect(() => {\n    if (state.popoverState === PopoverStates.Closed && (props.unmount ?? true)) {\n      dispatch({ type: ActionTypes.SetPanel, panel: null })\n    }\n  }, [state.popoverState, props.unmount, dispatch])\n\n  // Move focus within panel\n  useEffect(() => {\n    if (!focus) return\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n\n    let activeElement = document.activeElement as HTMLElement\n    if (internalPanelRef.current.contains(activeElement)) return // Already focused within Dialog\n\n    focusIn(internalPanelRef.current, Focus.First)\n  }, [focus, internalPanelRef, state.popoverState])\n\n  // Handle Tab / Shift+Tab focus positioning\n  useWindowEvent('keydown', event => {\n    if (state.popoverState !== PopoverStates.Open) return\n    if (!internalPanelRef.current) return\n    if (event.key !== Keys.Tab) return\n    if (!document.activeElement) return\n    if (!internalPanelRef.current) return\n    if (!internalPanelRef.current.contains(document.activeElement)) return\n\n    // We will take-over the default tab behaviour so that we have a bit\n    // control over what is focused next. It will behave exactly the same,\n    // but it will also \"fix\" some issues based on whether you are using a\n    // Portal or not.\n    event.preventDefault()\n\n    let result = focusIn(internalPanelRef.current, event.shiftKey ? Focus.Previous : Focus.Next)\n\n    if (result === FocusResult.Underflow) {\n      return state.button?.focus()\n    } else if (result === FocusResult.Overflow) {\n      if (!state.button) return\n\n      let elements = getFocusableElements()\n      let buttonIdx = elements.indexOf(state.button)\n\n      let nextElements = elements\n        .splice(buttonIdx + 1) // Elements after button\n        .filter(element => !internalPanelRef.current?.contains(element)) // Ignore items in panel\n\n      // Try to focus the next element, however it could fail if we are in a\n      // Portal that happens to be the very last one in the DOM. In that\n      // case we would Error (because nothing after the button is\n      // focusable). Therefore we will try and focus the very first item in\n      // the document.body.\n      if (focusIn(nextElements, Focus.First) === FocusResult.Error) {\n        focusIn(document.body, Focus.First)\n      }\n    }\n  })\n\n  // Handle focus out when we are in special \"focus\" mode\n  useWindowEvent(\n    'focus',\n    () => {\n      if (!focus) return\n      if (state.popoverState !== PopoverStates.Open) return\n      if (!internalPanelRef.current) return\n\n      if (internalPanelRef.current?.contains(document.activeElement as HTMLElement)) return\n      dispatch({ type: ActionTypes.ClosePopover })\n    },\n    true\n  )\n\n  let slot = useMemo<PanelRenderPropArg>(\n    () => ({ open: state.popoverState === PopoverStates.Open }),\n    [state]\n  )\n  let propsWeControl = {\n    ref: panelRef,\n    id: state.panelId,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <PopoverPanelContext.Provider value={state.panelId}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_PANEL_TAG,\n        features: PanelRenderFeatures,\n        visible,\n        name: 'Popover.Panel',\n      })}\n    </PopoverPanelContext.Provider>\n  )\n})\n\n// ---\n\nlet DEFAULT_GROUP_TAG = 'div' as const\ninterface GroupRenderPropArg {}\ntype GroupPropsWeControl = 'id'\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_PANEL_TAG>(\n  props: Props<TTag, GroupRenderPropArg, GroupPropsWeControl>\n) {\n  let groupRef = useRef<HTMLElement | null>(null)\n  let [popovers, setPopovers] = useState<PopoverRegisterBag[]>([])\n\n  let unregisterPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => {\n        let idx = existing.indexOf(registerbag)\n        if (idx !== -1) {\n          let clone = existing.slice()\n          clone.splice(idx, 1)\n          return clone\n        }\n        return existing\n      })\n    },\n    [setPopovers]\n  )\n\n  let registerPopover = useCallback(\n    (registerbag: PopoverRegisterBag) => {\n      setPopovers(existing => [...existing, registerbag])\n      return () => unregisterPopover(registerbag)\n    },\n    [setPopovers, unregisterPopover]\n  )\n\n  let isFocusWithinPopoverGroup = useCallback(() => {\n    let element = document.activeElement as HTMLElement\n\n    if (groupRef.current?.contains(element)) return true\n\n    // Check if the focus is in one of the button or panel elements. This is important in case you are rendering inside a Portal.\n    return popovers.some(bag => {\n      return (\n        document.getElementById(bag.buttonId)?.contains(element) ||\n        document.getElementById(bag.panelId)?.contains(element)\n      )\n    })\n  }, [groupRef, popovers])\n\n  let closeOthers = useCallback(\n    (buttonId: string) => {\n      for (let popover of popovers) {\n        if (popover.buttonId !== buttonId) popover.close()\n      }\n    },\n    [popovers]\n  )\n\n  let contextBag = useMemo<ContextType<typeof PopoverGroupContext>>(\n    () => ({\n      registerPopover: registerPopover,\n      unregisterPopover: unregisterPopover,\n      isFocusWithinPopoverGroup,\n      closeOthers,\n    }),\n    [registerPopover, unregisterPopover, isFocusWithinPopoverGroup, closeOthers]\n  )\n\n  let slot = useMemo<GroupRenderPropArg>(() => ({}), [])\n  let propsWeControl = { ref: groupRef }\n  let passthroughProps = props\n\n  return (\n    <PopoverGroupContext.Provider value={contextBag}>\n      {render({\n        props: { ...passthroughProps, ...propsWeControl },\n        slot,\n        defaultTag: DEFAULT_GROUP_TAG,\n        name: 'Popover.Group',\n      })}\n    </PopoverGroupContext.Provider>\n  )\n}\n\n// ---\n\nPopover.Button = Button\nPopover.Overlay = Overlay\nPopover.Panel = Panel\nPopover.Group = Group\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  ReactNode,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { useId } from '../../hooks/use-id'\nimport { render } from '../../utils/render'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\n// ---\n\ninterface SharedData {\n  slot?: {}\n  name?: string\n  props?: {}\n}\n\nlet LabelContext = createContext<({ register(value: string): () => void } & SharedData) | null>(\n  null\n)\n\nfunction useLabelContext() {\n  let context = useContext(LabelContext)\n  if (context === null) {\n    let err = new Error('You used a <Label /> component, but it is not inside a relevant parent.')\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useLabelContext)\n    throw err\n  }\n  return context\n}\n\ninterface LabelProviderProps extends SharedData {\n  children: ReactNode\n}\n\nexport function useLabels(): [string | undefined, (props: LabelProviderProps) => JSX.Element] {\n  let [labelIds, setLabelIds] = useState<string[]>([])\n\n  return [\n    // The actual id's as string or undefined.\n    labelIds.length > 0 ? labelIds.join(' ') : undefined,\n\n    // The provider component\n    useMemo(() => {\n      return function LabelProvider(props: LabelProviderProps) {\n        let register = useCallback((value: string) => {\n          setLabelIds(existing => [...existing, value])\n\n          return () =>\n            setLabelIds(existing => {\n              let clone = existing.slice()\n              let idx = clone.indexOf(value)\n              if (idx !== -1) clone.splice(idx, 1)\n              return clone\n            })\n        }, [])\n\n        let contextBag = useMemo(\n          () => ({ register, slot: props.slot, name: props.name, props: props.props }),\n          [register, props.slot, props.name, props.props]\n        )\n\n        return <LabelContext.Provider value={contextBag}>{props.children}</LabelContext.Provider>\n      }\n    }, [setLabelIds]),\n  ]\n}\n\n// ---\n\nlet DEFAULT_LABEL_TAG = 'label' as const\ninterface LabelRenderPropArg {}\ntype LabelPropsWeControl = 'id'\n\nexport function Label<TTag extends ElementType = typeof DEFAULT_LABEL_TAG>(\n  props: Props<TTag, LabelRenderPropArg, LabelPropsWeControl> & {\n    passive?: boolean\n  }\n) {\n  let { passive = false, ...passThroughProps } = props\n  let context = useLabelContext()\n  let id = `headlessui-label-${useId()}`\n\n  useIsoMorphicEffect(() => context.register(id), [id, context.register])\n\n  let propsWeControl = { ...context.props, id }\n\n  let allProps = { ...passThroughProps, ...propsWeControl }\n  // @ts-expect-error props are dynamic via context, some components will\n  //                  provide an onClick then we can delete it.\n  if (passive) delete allProps['onClick']\n\n  return render({\n    props: allProps,\n    slot: context.slot || {},\n    defaultTag: DEFAULT_LABEL_TAG,\n    name: context.name || 'Label',\n  })\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useReducer,\n  useRef,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n  KeyboardEvent as ReactKeyboardEvent,\n  ContextType,\n} from 'react'\n\nimport { Props, Expand } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { match } from '../../utils/match'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\nimport { Keys } from '../../components/keyboard'\nimport { focusIn, Focus, FocusResult } from '../../utils/focus-management'\nimport { useFlags } from '../../hooks/use-flags'\nimport { Label, useLabels } from '../../components/label/label'\nimport { Description, useDescriptions } from '../../components/description/description'\nimport { useTreeWalker } from '../../hooks/use-tree-walker'\n\ninterface Option {\n  id: string\n  element: MutableRefObject<HTMLElement | null>\n  propsRef: MutableRefObject<{ value: unknown; disabled: boolean }>\n}\n\ninterface StateDefinition {\n  options: Option[]\n}\n\nenum ActionTypes {\n  RegisterOption,\n  UnregisterOption,\n}\n\ntype Actions =\n  | Expand<{ type: ActionTypes.RegisterOption } & Option>\n  | { type: ActionTypes.UnregisterOption; id: Option['id'] }\n\nlet reducers: {\n  [P in ActionTypes]: (\n    state: StateDefinition,\n    action: Extract<Actions, { type: P }>\n  ) => StateDefinition\n} = {\n  [ActionTypes.RegisterOption](state, action) {\n    return {\n      ...state,\n      options: [\n        ...state.options,\n        { id: action.id, element: action.element, propsRef: action.propsRef },\n      ],\n    }\n  },\n  [ActionTypes.UnregisterOption](state, action) {\n    let options = state.options.slice()\n    let idx = state.options.findIndex(radio => radio.id === action.id)\n    if (idx === -1) return state\n    options.splice(idx, 1)\n    return { ...state, options }\n  },\n}\n\nlet RadioGroupContext = createContext<{\n  registerOption(option: Option): () => void\n  change(value: unknown): boolean\n  value: unknown\n  firstOption?: Option\n  containsCheckedOption: boolean\n  disabled: boolean\n} | null>(null)\nRadioGroupContext.displayName = 'RadioGroupContext'\n\nfunction useRadioGroupContext(component: string) {\n  let context = useContext(RadioGroupContext)\n  if (context === null) {\n    let err = new Error(`<${component} /> is missing a parent <${RadioGroup.name} /> component.`)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, useRadioGroupContext)\n    throw err\n  }\n  return context\n}\n\nfunction stateReducer(state: StateDefinition, action: Actions) {\n  return match(action.type, reducers, state, action)\n}\n\n// ---\n\nlet DEFAULT_RADIO_GROUP_TAG = 'div' as const\ninterface RadioGroupRenderPropArg {}\ntype RadioGroupPropsWeControl = 'role' | 'aria-labelledby' | 'aria-describedby' | 'id'\n\nexport function RadioGroup<\n  TTag extends ElementType = typeof DEFAULT_RADIO_GROUP_TAG,\n  TType = string\n>(\n  props: Props<\n    TTag,\n    RadioGroupRenderPropArg,\n    RadioGroupPropsWeControl | 'value' | 'onChange' | 'disabled'\n  > & {\n    value: TType\n    onChange(value: TType): void\n    disabled?: boolean\n  }\n) {\n  let { value, onChange, disabled = false, ...passThroughProps } = props\n  let [{ options }, dispatch] = useReducer(stateReducer, {\n    options: [],\n  } as StateDefinition)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let id = `headlessui-radiogroup-${useId()}`\n  let radioGroupRef = useRef<HTMLElement | null>(null)\n\n  let firstOption = useMemo(\n    () =>\n      options.find(option => {\n        if (option.propsRef.current.disabled) return false\n        return true\n      }),\n    [options]\n  )\n  let containsCheckedOption = useMemo(\n    () => options.some(option => option.propsRef.current.value === value),\n    [options, value]\n  )\n\n  let triggerChange = useCallback(\n    nextValue => {\n      if (disabled) return false\n      if (nextValue === value) return false\n      let nextOption = options.find(option => option.propsRef.current.value === nextValue)?.propsRef\n        .current\n      if (nextOption?.disabled) return false\n\n      onChange(nextValue)\n      return true\n    },\n    [onChange, value, disabled, options]\n  )\n\n  useTreeWalker({\n    container: radioGroupRef.current,\n    accept(node) {\n      if (node.getAttribute('role') === 'radio') return NodeFilter.FILTER_REJECT\n      if (node.hasAttribute('role')) return NodeFilter.FILTER_SKIP\n      return NodeFilter.FILTER_ACCEPT\n    },\n    walk(node) {\n      node.setAttribute('role', 'none')\n    },\n  })\n\n  let handleKeyDown = useCallback(\n    (event: ReactKeyboardEvent<HTMLButtonElement>) => {\n      let container = radioGroupRef.current\n      if (!container) return\n\n      let all = options\n        .filter(option => option.propsRef.current.disabled === false)\n        .map(radio => radio.element.current) as HTMLElement[]\n\n      switch (event.key) {\n        case Keys.ArrowLeft:\n        case Keys.ArrowUp:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Previous | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.ArrowRight:\n        case Keys.ArrowDown:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let result = focusIn(all, Focus.Next | Focus.WrapAround)\n\n            if (result === FocusResult.Success) {\n              let activeOption = options.find(\n                option => option.element.current === document.activeElement\n              )\n              if (activeOption) triggerChange(activeOption.propsRef.current.value)\n            }\n          }\n          break\n\n        case Keys.Space:\n          {\n            event.preventDefault()\n            event.stopPropagation()\n\n            let activeOption = options.find(\n              option => option.element.current === document.activeElement\n            )\n            if (activeOption) triggerChange(activeOption.propsRef.current.value)\n          }\n          break\n      }\n    },\n    [radioGroupRef, options, triggerChange]\n  )\n\n  let registerOption = useCallback(\n    (option: Option) => {\n      dispatch({ type: ActionTypes.RegisterOption, ...option })\n      return () => dispatch({ type: ActionTypes.UnregisterOption, id: option.id })\n    },\n    [dispatch]\n  )\n\n  let api = useMemo<ContextType<typeof RadioGroupContext>>(\n    () => ({\n      registerOption,\n      firstOption,\n      containsCheckedOption,\n      change: triggerChange,\n      disabled,\n      value,\n    }),\n    [registerOption, firstOption, containsCheckedOption, triggerChange, disabled, value]\n  )\n\n  let propsWeControl = {\n    ref: radioGroupRef,\n    id,\n    role: 'radiogroup',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    onKeyDown: handleKeyDown,\n  }\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        <RadioGroupContext.Provider value={api}>\n          {render({\n            props: { ...passThroughProps, ...propsWeControl },\n            defaultTag: DEFAULT_RADIO_GROUP_TAG,\n            name: 'RadioGroup',\n          })}\n        </RadioGroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nenum OptionState {\n  Empty = 1 << 0,\n  Active = 1 << 1,\n}\n\nlet DEFAULT_OPTION_TAG = 'div' as const\ninterface OptionRenderPropArg {\n  checked: boolean\n  active: boolean\n  disabled: boolean\n}\ntype RadioPropsWeControl =\n  | 'aria-checked'\n  | 'id'\n  | 'onBlur'\n  | 'onClick'\n  | 'onFocus'\n  | 'ref'\n  | 'role'\n  | 'tabIndex'\n\nfunction Option<\n  TTag extends ElementType = typeof DEFAULT_OPTION_TAG,\n  // TODO: One day we will be able to infer this type from the generic in RadioGroup itself.\n  // But today is not that day..\n  TType = Parameters<typeof RadioGroup>[0]['value']\n>(\n  props: Props<TTag, OptionRenderPropArg, RadioPropsWeControl | 'value' | 'disabled'> & {\n    value: TType\n    disabled?: boolean\n  }\n) {\n  let optionRef = useRef<HTMLElement | null>(null)\n  let id = `headlessui-radiogroup-option-${useId()}`\n\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n  let { addFlag, removeFlag, hasFlag } = useFlags(OptionState.Empty)\n\n  let { value, disabled = false, ...passThroughProps } = props\n  let propsRef = useRef({ value, disabled })\n\n  useIsoMorphicEffect(() => {\n    propsRef.current.value = value\n  }, [value, propsRef])\n  useIsoMorphicEffect(() => {\n    propsRef.current.disabled = disabled\n  }, [disabled, propsRef])\n\n  let {\n    registerOption,\n    disabled: radioGroupDisabled,\n    change,\n    firstOption,\n    containsCheckedOption,\n    value: radioGroupValue,\n  } = useRadioGroupContext([RadioGroup.name, Option.name].join('.'))\n\n  useIsoMorphicEffect(() => registerOption({ id, element: optionRef, propsRef }), [\n    id,\n    registerOption,\n    optionRef,\n    props,\n  ])\n\n  let handleClick = useCallback(() => {\n    if (!change(value)) return\n\n    addFlag(OptionState.Active)\n    optionRef.current?.focus()\n  }, [addFlag, change, value])\n\n  let handleFocus = useCallback(() => addFlag(OptionState.Active), [addFlag])\n  let handleBlur = useCallback(() => removeFlag(OptionState.Active), [removeFlag])\n\n  let isFirstOption = firstOption?.id === id\n  let isDisabled = radioGroupDisabled || disabled\n\n  let checked = radioGroupValue === value\n  let propsWeControl = {\n    ref: optionRef,\n    id,\n    role: 'radio',\n    'aria-checked': checked ? 'true' : 'false',\n    'aria-labelledby': labelledby,\n    'aria-describedby': describedby,\n    tabIndex: (() => {\n      if (isDisabled) return -1\n      if (checked) return 0\n      if (!containsCheckedOption && isFirstOption) return 0\n      return -1\n    })(),\n    onClick: isDisabled ? undefined : handleClick,\n    onFocus: isDisabled ? undefined : handleFocus,\n    onBlur: isDisabled ? undefined : handleBlur,\n  }\n  let slot = useMemo<OptionRenderPropArg>(\n    () => ({ checked, disabled: isDisabled, active: hasFlag(OptionState.Active) }),\n    [checked, isDisabled, hasFlag]\n  )\n\n  return (\n    <DescriptionProvider name=\"RadioGroup.Description\">\n      <LabelProvider name=\"RadioGroup.Label\">\n        {render({\n          props: { ...passThroughProps, ...propsWeControl },\n          slot,\n          defaultTag: DEFAULT_OPTION_TAG,\n          name: 'RadioGroup.Option',\n        })}\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nRadioGroup.Option = Option\nRadioGroup.Label = Label\nRadioGroup.Description = Description\n","import { useState, useCallback } from 'react'\n\nexport function useFlags(initialFlags = 0) {\n  let [flags, setFlags] = useState(initialFlags)\n\n  let addFlag = useCallback((flag: number) => setFlags(flags => flags | flag), [setFlags])\n  let hasFlag = useCallback((flag: number) => Boolean(flags & flag), [flags])\n  let removeFlag = useCallback((flag: number) => setFlags(flags => flags & ~flag), [setFlags])\n  let toggleFlag = useCallback((flag: number) => setFlags(flags => flags ^ flag), [setFlags])\n\n  return { addFlag, hasFlag, removeFlag, toggleFlag }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useMemo,\n  useState,\n\n  // Types\n  ElementType,\n  KeyboardEvent as ReactKeyboardEvent,\n  MouseEvent as ReactMouseEvent,\n} from 'react'\n\nimport { Props } from '../../types'\nimport { render } from '../../utils/render'\nimport { useId } from '../../hooks/use-id'\nimport { Keys } from '../keyboard'\nimport { isDisabledReactIssue7711 } from '../../utils/bugs'\nimport { Label, useLabels } from '../label/label'\nimport { Description, useDescriptions } from '../description/description'\n\ninterface StateDefinition {\n  switch: HTMLButtonElement | null\n  setSwitch(element: HTMLButtonElement): void\n  labelledby: string | undefined\n  describedby: string | undefined\n}\n\nlet GroupContext = createContext<StateDefinition | null>(null)\nGroupContext.displayName = 'GroupContext'\n\n// ---\n\nlet DEFAULT_GROUP_TAG = Fragment\n\nfunction Group<TTag extends ElementType = typeof DEFAULT_GROUP_TAG>(props: Props<TTag>) {\n  let [switchElement, setSwitchElement] = useState<HTMLButtonElement | null>(null)\n  let [labelledby, LabelProvider] = useLabels()\n  let [describedby, DescriptionProvider] = useDescriptions()\n\n  let context = useMemo<StateDefinition>(\n    () => ({ switch: switchElement, setSwitch: setSwitchElement, labelledby, describedby }),\n    [switchElement, setSwitchElement, labelledby, describedby]\n  )\n\n  return (\n    <DescriptionProvider name=\"Switch.Description\">\n      <LabelProvider\n        name=\"Switch.Label\"\n        props={{\n          onClick() {\n            if (!switchElement) return\n            switchElement.click()\n            switchElement.focus({ preventScroll: true })\n          },\n        }}\n      >\n        <GroupContext.Provider value={context}>\n          {render({ props, defaultTag: DEFAULT_GROUP_TAG, name: 'Switch.Group' })}\n        </GroupContext.Provider>\n      </LabelProvider>\n    </DescriptionProvider>\n  )\n}\n\n// ---\n\nlet DEFAULT_SWITCH_TAG = 'button' as const\ninterface SwitchRenderPropArg {\n  checked: boolean\n}\ntype SwitchPropsWeControl =\n  | 'id'\n  | 'role'\n  | 'tabIndex'\n  | 'aria-checked'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'onClick'\n  | 'onKeyUp'\n  | 'onKeyPress'\n\nexport function Switch<TTag extends ElementType = typeof DEFAULT_SWITCH_TAG>(\n  props: Props<TTag, SwitchRenderPropArg, SwitchPropsWeControl | 'checked' | 'onChange'> & {\n    checked: boolean\n    onChange(checked: boolean): void\n  }\n) {\n  let { checked, onChange, ...passThroughProps } = props\n  let id = `headlessui-switch-${useId()}`\n  let groupContext = useContext(GroupContext)\n\n  let toggle = useCallback(() => onChange(!checked), [onChange, checked])\n  let handleClick = useCallback(\n    (event: ReactMouseEvent) => {\n      if (isDisabledReactIssue7711(event.currentTarget)) return event.preventDefault()\n      event.preventDefault()\n      toggle()\n    },\n    [toggle]\n  )\n  let handleKeyUp = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => {\n      if (event.key !== Keys.Tab) event.preventDefault()\n      if (event.key === Keys.Space) toggle()\n    },\n    [toggle]\n  )\n\n  // This is needed so that we can \"cancel\" the click event when we use the `Enter` key on a button.\n  let handleKeyPress = useCallback(\n    (event: ReactKeyboardEvent<HTMLElement>) => event.preventDefault(),\n    []\n  )\n\n  let slot = useMemo<SwitchRenderPropArg>(() => ({ checked }), [checked])\n  let propsWeControl = {\n    id,\n    ref: groupContext === null ? undefined : groupContext.setSwitch,\n    role: 'switch',\n    tabIndex: 0,\n    'aria-checked': checked,\n    'aria-labelledby': groupContext?.labelledby,\n    'aria-describedby': groupContext?.describedby,\n    onClick: handleClick,\n    onKeyUp: handleKeyUp,\n    onKeyPress: handleKeyPress,\n  }\n\n  if (passThroughProps.as === 'button') {\n    Object.assign(propsWeControl, { type: 'button' })\n  }\n\n  return render({\n    props: { ...passThroughProps, ...propsWeControl },\n    slot,\n    defaultTag: DEFAULT_SWITCH_TAG,\n    name: 'Switch',\n  })\n}\n\n// ---\n\nSwitch.Group = Group\nSwitch.Label = Label\nSwitch.Description = Description\n","import { once } from '../../../utils/once'\nimport { disposables } from '../../../utils/disposables'\n\nfunction addClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.add(...classes)\n}\n\nfunction removeClasses(node: HTMLElement, ...classes: string[]) {\n  node && classes.length > 0 && node.classList.remove(...classes)\n}\n\nexport enum Reason {\n  Finished = 'finished',\n  Cancelled = 'cancelled',\n}\n\nfunction waitForTransition(node: HTMLElement, done: (reason: Reason) => void) {\n  let d = disposables()\n\n  if (!node) return d.dispose\n\n  // Safari returns a comma separated list of values, so let's sort them and take the highest value.\n  let { transitionDuration, transitionDelay } = getComputedStyle(node)\n\n  let [durationMs, delaysMs] = [transitionDuration, transitionDelay].map(value => {\n    let [resolvedValue = 0] = value\n      .split(',')\n      // Remove falsy we can't work with\n      .filter(Boolean)\n      // Values are returned as `0.3s` or `75ms`\n      .map(v => (v.includes('ms') ? parseFloat(v) : parseFloat(v) * 1000))\n      .sort((a, z) => z - a)\n\n    return resolvedValue\n  })\n\n  // Waiting for the transition to end. We could use the `transitionend` event, however when no\n  // actual transition/duration is defined then the `transitionend` event is not fired.\n  //\n  // TODO: Downside is, when you slow down transitions via devtools this timeout is still using the\n  // full 100% speed instead of the 25% or 10%.\n  if (durationMs !== 0) {\n    d.setTimeout(() => {\n      done(Reason.Finished)\n    }, durationMs + delaysMs)\n  } else {\n    // No transition is happening, so we should cleanup already. Otherwise we have to wait until we\n    // get disposed.\n    done(Reason.Finished)\n  }\n\n  // If we get disposed before the timeout runs we should cleanup anyway\n  d.add(() => done(Reason.Cancelled))\n\n  return d.dispose\n}\n\nexport function transition(\n  node: HTMLElement,\n  base: string[],\n  from: string[],\n  to: string[],\n  done?: (reason: Reason) => void\n) {\n  let d = disposables()\n  let _done = done !== undefined ? once(done) : () => {}\n\n  addClasses(node, ...base, ...from)\n\n  d.nextFrame(() => {\n    removeClasses(node, ...from)\n    addClasses(node, ...to)\n\n    d.add(\n      waitForTransition(node, reason => {\n        removeClasses(node, ...to, ...base)\n        return _done(reason)\n      })\n    )\n  })\n\n  // Once we get disposed, we should ensure that we cleanup after ourselves. In case of an unmount,\n  // the node itself will be nullified and will be a no-op. In case of a full transition the classes\n  // are already removed which is also a no-op. However if you go from enter -> leave mid-transition\n  // then we have some leftovers that should be cleaned.\n  d.add(() => removeClasses(node, ...base, ...from, ...to))\n\n  // When we get disposed early, than we should also call the done method but switch the reason.\n  d.add(() => _done(Reason.Cancelled))\n\n  return d.dispose\n}\n","import { useRef, useEffect } from 'react'\n\nexport function useIsInitialRender() {\n  let initial = useRef(true)\n\n  useEffect(() => {\n    initial.current = false\n  }, [])\n\n  return initial.current\n}\n","export function once<T>(cb: (...args: T[]) => void) {\n  let state = { called: false }\n\n  return (...args: T[]) => {\n    if (state.called) return\n    state.called = true\n    return cb(...args)\n  }\n}\n","import React, {\n  Fragment,\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n\n  // Types\n  ElementType,\n  MutableRefObject,\n} from 'react'\nimport { Props } from '../../types'\n\nimport { useId } from '../../hooks/use-id'\nimport { useIsInitialRender } from '../../hooks/use-is-initial-render'\nimport { match } from '../../utils/match'\nimport { useIsMounted } from '../../hooks/use-is-mounted'\nimport { useIsoMorphicEffect } from '../../hooks/use-iso-morphic-effect'\n\nimport { Features, PropsForFeatures, render, RenderStrategy } from '../../utils/render'\nimport { Reason, transition } from './utils/transition'\nimport { OpenClosedProvider, State, useOpenClosed } from '../../internal/open-closed'\nimport { useServerHandoffComplete } from '../../hooks/use-server-handoff-complete'\n\ntype ID = ReturnType<typeof useId>\n\nfunction useSplitClasses(classes: string = '') {\n  return useMemo(() => classes.split(' ').filter(className => className.trim().length > 1), [\n    classes,\n  ])\n}\n\ninterface TransitionContextValues {\n  show: boolean\n  appear: boolean\n}\nlet TransitionContext = createContext<TransitionContextValues | null>(null)\nTransitionContext.displayName = 'TransitionContext'\n\nenum TreeStates {\n  Visible = 'visible',\n  Hidden = 'hidden',\n}\n\nexport interface TransitionClasses {\n  enter?: string\n  enterFrom?: string\n  enterTo?: string\n  leave?: string\n  leaveFrom?: string\n  leaveTo?: string\n}\n\nexport interface TransitionEvents {\n  beforeEnter?: () => void\n  afterEnter?: () => void\n  beforeLeave?: () => void\n  afterLeave?: () => void\n}\n\ntype TransitionChildProps<TTag> = Props<TTag, TransitionChildRenderPropArg> &\n  PropsForFeatures<typeof TransitionChildRenderFeatures> &\n  TransitionClasses &\n  TransitionEvents & { appear?: boolean }\n\nfunction useTransitionContext() {\n  let context = useContext(TransitionContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\nfunction useParentNesting() {\n  let context = useContext(NestingContext)\n\n  if (context === null) {\n    throw new Error(\n      'A <Transition.Child /> is used but it is missing a parent <Transition /> or <Transition.Root />.'\n    )\n  }\n\n  return context\n}\n\ninterface NestingContextValues {\n  children: MutableRefObject<{ id: ID; state: TreeStates }[]>\n  register: (id: ID) => () => void\n  unregister: (id: ID, strategy?: RenderStrategy) => void\n}\n\nlet NestingContext = createContext<NestingContextValues | null>(null)\nNestingContext.displayName = 'NestingContext'\n\nfunction hasChildren(\n  bag: NestingContextValues['children'] | { children: NestingContextValues['children'] }\n): boolean {\n  if ('children' in bag) return hasChildren(bag.children)\n  return bag.current.filter(({ state }) => state === TreeStates.Visible).length > 0\n}\n\nfunction useNesting(done?: () => void) {\n  let doneRef = useRef(done)\n  let transitionableChildren = useRef<NestingContextValues['children']['current']>([])\n  let mounted = useIsMounted()\n\n  useEffect(() => {\n    doneRef.current = done\n  }, [done])\n\n  let unregister = useCallback(\n    (childId: ID, strategy = RenderStrategy.Hidden) => {\n      let idx = transitionableChildren.current.findIndex(({ id }) => id === childId)\n      if (idx === -1) return\n\n      match(strategy, {\n        [RenderStrategy.Unmount]() {\n          transitionableChildren.current.splice(idx, 1)\n        },\n        [RenderStrategy.Hidden]() {\n          transitionableChildren.current[idx].state = TreeStates.Hidden\n        },\n      })\n\n      if (!hasChildren(transitionableChildren) && mounted.current) {\n        doneRef.current?.()\n      }\n    },\n    [doneRef, mounted, transitionableChildren]\n  )\n\n  let register = useCallback(\n    (childId: ID) => {\n      let child = transitionableChildren.current.find(({ id }) => id === childId)\n      if (!child) {\n        transitionableChildren.current.push({ id: childId, state: TreeStates.Visible })\n      } else if (child.state !== TreeStates.Visible) {\n        child.state = TreeStates.Visible\n      }\n\n      return () => unregister(childId, RenderStrategy.Unmount)\n    },\n    [transitionableChildren, unregister]\n  )\n\n  return useMemo(\n    () => ({\n      children: transitionableChildren,\n      register,\n      unregister,\n    }),\n    [register, unregister, transitionableChildren]\n  )\n}\n\nfunction noop() {}\nlet eventNames = ['beforeEnter', 'afterEnter', 'beforeLeave', 'afterLeave'] as const\nfunction ensureEventHooksExist(events: TransitionEvents) {\n  let result = {} as Record<keyof typeof events, () => void>\n  for (let name of eventNames) {\n    result[name] = events[name] ?? noop\n  }\n  return result\n}\n\nfunction useEvents(events: TransitionEvents) {\n  let eventsRef = useRef(ensureEventHooksExist(events))\n\n  useEffect(() => {\n    eventsRef.current = ensureEventHooksExist(events)\n  }, [events])\n\n  return eventsRef\n}\n\n// ---\n\nlet DEFAULT_TRANSITION_CHILD_TAG = 'div' as const\ntype TransitionChildRenderPropArg = MutableRefObject<HTMLDivElement>\nlet TransitionChildRenderFeatures = Features.RenderStrategy\n\nfunction TransitionChild<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag>\n) {\n  let {\n    // Event \"handlers\"\n    beforeEnter,\n    afterEnter,\n    beforeLeave,\n    afterLeave,\n\n    // Class names\n    enter,\n    enterFrom,\n    enterTo,\n    leave,\n    leaveFrom,\n    leaveTo,\n\n    // @ts-expect-error\n    ...rest\n  } = props as typeof props\n  let container = useRef<HTMLElement | null>(null)\n  let [state, setState] = useState(TreeStates.Visible)\n  let strategy = rest.unmount ? RenderStrategy.Unmount : RenderStrategy.Hidden\n\n  let { show, appear } = useTransitionContext()\n  let { register, unregister } = useParentNesting()\n\n  let initial = useIsInitialRender()\n  let id = useId()\n\n  let isTransitioning = useRef(false)\n\n  let nesting = useNesting(() => {\n    // When all children have been unmounted we can only hide ourselves if and only if we are not\n    // transitioning ourselves. Otherwise we would unmount before the transitions are finished.\n    if (!isTransitioning.current) {\n      setState(TreeStates.Hidden)\n      unregister(id)\n      events.current.afterLeave()\n    }\n  })\n\n  useIsoMorphicEffect(() => {\n    if (!id) return\n    return register(id)\n  }, [register, id])\n\n  useIsoMorphicEffect(() => {\n    // If we are in another mode than the Hidden mode then ignore\n    if (strategy !== RenderStrategy.Hidden) return\n    if (!id) return\n\n    // Make sure that we are visible\n    if (show && state !== TreeStates.Visible) {\n      setState(TreeStates.Visible)\n      return\n    }\n\n    match(state, {\n      [TreeStates.Hidden]: () => unregister(id),\n      [TreeStates.Visible]: () => register(id),\n    })\n  }, [state, id, register, unregister, show, strategy])\n\n  let enterClasses = useSplitClasses(enter)\n  let enterFromClasses = useSplitClasses(enterFrom)\n  let enterToClasses = useSplitClasses(enterTo)\n\n  let leaveClasses = useSplitClasses(leave)\n  let leaveFromClasses = useSplitClasses(leaveFrom)\n  let leaveToClasses = useSplitClasses(leaveTo)\n\n  let events = useEvents({ beforeEnter, afterEnter, beforeLeave, afterLeave })\n\n  let ready = useServerHandoffComplete()\n\n  useEffect(() => {\n    if (ready && state === TreeStates.Visible && container.current === null) {\n      throw new Error('Did you forget to passthrough the `ref` to the actual DOM node?')\n    }\n  }, [container, state, ready])\n\n  // Skipping initial transition\n  let skip = initial && !appear\n\n  useIsoMorphicEffect(() => {\n    let node = container.current\n    if (!node) return\n    if (skip) return\n\n    isTransitioning.current = true\n\n    if (show) events.current.beforeEnter()\n    if (!show) events.current.beforeLeave()\n\n    return show\n      ? transition(node, enterClasses, enterFromClasses, enterToClasses, reason => {\n          isTransitioning.current = false\n          if (reason === Reason.Finished) events.current.afterEnter()\n        })\n      : transition(node, leaveClasses, leaveFromClasses, leaveToClasses, reason => {\n          isTransitioning.current = false\n\n          if (reason !== Reason.Finished) return\n\n          // When we don't have children anymore we can safely unregister from the parent and hide\n          // ourselves.\n          if (!hasChildren(nesting)) {\n            setState(TreeStates.Hidden)\n            unregister(id)\n            events.current.afterLeave()\n          }\n        })\n  }, [\n    events,\n    id,\n    isTransitioning,\n    unregister,\n    nesting,\n    container,\n    skip,\n    show,\n    enterClasses,\n    enterFromClasses,\n    enterToClasses,\n    leaveClasses,\n    leaveFromClasses,\n    leaveToClasses,\n  ])\n\n  let propsWeControl = { ref: container }\n  let passthroughProps = rest\n\n  return (\n    <NestingContext.Provider value={nesting}>\n      <OpenClosedProvider\n        value={match(state, {\n          [TreeStates.Visible]: State.Open,\n          [TreeStates.Hidden]: State.Closed,\n        })}\n      >\n        {render({\n          props: { ...passthroughProps, ...propsWeControl },\n          defaultTag: DEFAULT_TRANSITION_CHILD_TAG,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition.Child',\n        })}\n      </OpenClosedProvider>\n    </NestingContext.Provider>\n  )\n}\n\nexport function Transition<TTag extends ElementType = typeof DEFAULT_TRANSITION_CHILD_TAG>(\n  props: TransitionChildProps<TTag> & { show?: boolean; appear?: boolean }\n) {\n  // @ts-expect-error\n  let { show, appear = false, unmount, ...passthroughProps } = props as typeof props\n\n  let usesOpenClosedState = useOpenClosed()\n\n  if (show === undefined && usesOpenClosedState !== null) {\n    show = match(usesOpenClosedState, {\n      [State.Open]: true,\n      [State.Closed]: false,\n    })\n  }\n\n  if (![true, false].includes((show as unknown) as boolean)) {\n    throw new Error('A <Transition /> is used but it is missing a `show={true | false}` prop.')\n  }\n\n  let [state, setState] = useState(show ? TreeStates.Visible : TreeStates.Hidden)\n\n  let nestingBag = useNesting(() => {\n    setState(TreeStates.Hidden)\n  })\n\n  let initial = useIsInitialRender()\n  let transitionBag = useMemo<TransitionContextValues>(\n    () => ({ show: show as boolean, appear: appear || !initial }),\n    [show, appear, initial]\n  )\n\n  useEffect(() => {\n    if (show) {\n      setState(TreeStates.Visible)\n    } else if (!hasChildren(nestingBag)) {\n      setState(TreeStates.Hidden)\n    }\n  }, [show, nestingBag])\n\n  let sharedProps = { unmount }\n\n  return (\n    <NestingContext.Provider value={nestingBag}>\n      <TransitionContext.Provider value={transitionBag}>\n        {render({\n          props: {\n            ...sharedProps,\n            as: Fragment,\n            children: <TransitionChild {...sharedProps} {...passthroughProps} />,\n          },\n          defaultTag: Fragment,\n          features: TransitionChildRenderFeatures,\n          visible: state === TreeStates.Visible,\n          name: 'Transition',\n        })}\n      </TransitionContext.Provider>\n    </NestingContext.Provider>\n  )\n}\n\nTransition.Child = TransitionChild\nTransition.Root = Transition\n","import * as React from \"react\";\n\nfunction BellIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"currentColor\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9\"\n  }));\n}\n\nexport default BellIcon;","import * as React from \"react\";\n\nfunction MenuIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"currentColor\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"M4 6h16M4 12h16M4 18h16\"\n  }));\n}\n\nexport default MenuIcon;","import * as React from \"react\";\n\nfunction XIcon(props) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    stroke: \"currentColor\"\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 2,\n    d: \"M6 18L18 6M6 6l12 12\"\n  }));\n}\n\nexport default XIcon;"],"sourceRoot":""}